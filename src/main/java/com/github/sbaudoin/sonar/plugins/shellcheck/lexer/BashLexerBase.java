/**
 * Copyright (c) 2018-2021, Sylvain Baudoin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* The following code was generated by JFlex 1.7.0 */

/*
 * JFlex specification for Bash
 * Heavily inspired from https://github.com/BashSupport/BashSupport/blob/master/src/com/ansorgit/plugins/bash/lang/lexer/bash.flex
 */
package com.github.sbaudoin.sonar.plugins.shellcheck.lexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file {@code src/main/jflex/bash.jflex}
 */
public abstract class BashLexerBase extends AbstractBashLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_TEST = 2;
  public static final int S_TEST_COMMAND = 4;
  public static final int S_ARITH = 6;
  public static final int S_ARITH_SQUARE_MODE = 8;
  public static final int S_ARITH_ARRAY_MODE = 10;
  public static final int S_CASE = 12;
  public static final int S_CASE_PATTERN = 14;
  public static final int S_SUBSHELL = 16;
  public static final int S_DOLLAR_PREFIXED = 18;
  public static final int S_ARRAY = 20;
  public static final int S_ASSIGNMENT_LIST = 22;
  public static final int X_STRINGMODE = 24;
  public static final int S_PARAM_EXPANSION = 26;
  public static final int S_PARAM_EXPANSION_PATTERN = 28;
  public static final int S_PARAM_EXPANSION_DELIMITER = 30;
  public static final int S_PARAM_EXPANSION_REPLACEMENT = 32;
  public static final int S_BACKQUOTE = 34;
  public static final int X_HEREDOC_MARKER = 36;
  public static final int X_HEREDOC_MARKER_IGNORE_TABS = 38;
  public static final int X_HEREDOC = 40;
  public static final int X_HERE_STRING = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 18, 18, 19, 19, 20, 20
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\1\0\1\4\1\2\22\0\1\40\1\6\1\10"+
    "\1\5\1\7\1\76\1\21\1\11\1\46\1\32\1\22\1\24\1\51"+
    "\1\35\1\16\1\75\1\25\7\31\2\20\1\100\1\34\1\73\1\45"+
    "\1\72\1\77\1\23\6\27\1\74\4\17\1\74\1\17\1\74\1\74"+
    "\3\17\1\74\7\17\1\37\1\3\1\15\1\12\1\17\1\33\1\53"+
    "\1\30\1\52\1\55\1\44\1\61\1\71\1\64\1\42\1\17\1\74"+
    "\1\60\1\43\1\57\1\56\1\66\1\70\1\62\1\54\1\41\1\63"+
    "\1\17\1\65\1\26\1\17\1\74\1\47\1\36\1\50\1\67\6\0"+
    "\1\0\44\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14\1\13"+
    "\37\14\1\13\10\14\u01c2\14\4\0\14\14\16\0\5\14\7\0\1\14"+
    "\1\0\1\14\201\0\5\14\1\0\2\14\2\0\4\14\1\0\1\14"+
    "\6\0\1\14\1\0\3\14\1\0\1\14\1\0\24\14\1\0\123\14"+
    "\1\0\213\14\10\0\246\14\1\0\46\14\2\0\1\14\7\0\47\14"+
    "\110\0\33\14\5\0\3\14\55\0\53\14\25\0\12\13\4\0\2\14"+
    "\1\0\143\14\1\0\1\14\17\0\2\14\7\0\2\14\12\13\3\14"+
    "\2\0\1\14\20\0\1\14\1\0\36\14\35\0\131\14\13\0\1\14"+
    "\16\0\12\13\41\14\11\0\2\14\4\0\1\14\5\0\26\14\4\0"+
    "\1\14\11\0\1\14\3\0\1\14\27\0\31\14\107\0\25\14\1\0"+
    "\10\14\106\0\66\14\3\0\1\14\22\0\1\14\7\0\12\14\4\0"+
    "\12\13\1\0\20\14\4\0\10\14\2\0\2\14\2\0\26\14\1\0"+
    "\7\14\1\0\1\14\3\0\4\14\3\0\1\14\20\0\1\14\15\0"+
    "\2\14\1\0\3\14\4\0\12\13\2\14\23\0\6\14\4\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\2\14\1\0\2\14\1\0\2\14"+
    "\37\0\4\14\1\0\1\14\7\0\12\13\2\0\3\14\20\0\11\14"+
    "\1\0\3\14\1\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14"+
    "\3\0\1\14\22\0\1\14\17\0\2\14\4\0\12\13\11\0\1\14"+
    "\13\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14\1\0\2\14"+
    "\1\0\5\14\3\0\1\14\36\0\2\14\1\0\3\14\4\0\12\13"+
    "\1\0\1\14\21\0\1\14\1\0\6\14\3\0\3\14\1\0\4\14"+
    "\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14\3\0\3\14"+
    "\3\0\14\14\26\0\1\14\25\0\12\13\25\0\10\14\1\0\3\14"+
    "\1\0\27\14\1\0\20\14\3\0\1\14\32\0\3\14\5\0\2\14"+
    "\4\0\12\13\20\0\1\14\4\0\10\14\1\0\3\14\1\0\27\14"+
    "\1\0\12\14\1\0\5\14\3\0\1\14\40\0\1\14\1\0\2\14"+
    "\4\0\12\13\1\0\2\14\22\0\10\14\1\0\3\14\1\0\51\14"+
    "\2\0\1\14\20\0\1\14\5\0\3\14\10\0\3\14\4\0\12\13"+
    "\12\0\6\14\5\0\22\14\3\0\30\14\1\0\11\14\1\0\1\14"+
    "\2\0\7\14\37\0\12\13\21\0\60\14\1\0\2\14\14\0\7\14"+
    "\11\0\12\13\47\0\2\14\1\0\1\14\2\0\2\14\1\0\1\14"+
    "\2\0\1\14\6\0\4\14\1\0\7\14\1\0\3\14\1\0\1\14"+
    "\1\0\1\14\2\0\2\14\1\0\4\14\1\0\2\14\11\0\1\14"+
    "\2\0\5\14\1\0\1\14\11\0\12\13\2\0\4\14\40\0\1\14"+
    "\37\0\12\13\26\0\10\14\1\0\44\14\33\0\5\14\163\0\53\14"+
    "\24\0\1\14\12\13\6\0\6\14\4\0\4\14\3\0\1\14\3\0"+
    "\2\14\7\0\3\14\4\0\15\14\14\0\1\14\1\0\12\13\6\0"+
    "\46\14\1\0\1\14\5\0\1\14\2\0\53\14\1\0\u014d\14\1\0"+
    "\4\14\2\0\7\14\1\0\1\14\1\0\4\14\2\0\51\14\1\0"+
    "\4\14\2\0\41\14\1\0\4\14\2\0\7\14\1\0\1\14\1\0"+
    "\4\14\2\0\17\14\1\0\71\14\1\0\4\14\2\0\103\14\45\0"+
    "\20\14\20\0\126\14\2\0\6\14\3\0\u026c\14\2\0\21\14\1\0"+
    "\32\14\5\0\113\14\6\0\10\14\7\0\15\14\1\0\4\14\16\0"+
    "\22\14\16\0\22\14\16\0\15\14\1\0\3\14\17\0\64\14\43\0"+
    "\1\14\4\0\1\14\3\0\12\13\46\0\12\13\6\0\130\14\10\0"+
    "\5\14\2\0\42\14\1\0\1\14\5\0\106\14\12\0\37\14\47\0"+
    "\12\13\36\14\2\0\5\14\13\0\54\14\4\0\32\14\6\0\12\13"+
    "\46\0\27\14\11\0\65\14\53\0\12\13\6\0\12\13\15\0\1\14"+
    "\135\0\57\14\21\0\7\14\4\0\12\13\51\0\36\14\15\0\2\14"+
    "\12\13\54\14\32\0\44\14\34\0\12\13\3\0\3\14\12\13\44\14"+
    "\2\0\11\14\140\0\4\14\1\0\4\14\3\0\2\14\11\0\300\14"+
    "\100\0\u0116\14\2\0\6\14\2\0\46\14\2\0\6\14\2\0\10\14"+
    "\1\0\1\14\1\0\1\14\1\0\1\14\1\0\37\14\2\0\65\14"+
    "\1\0\7\14\1\0\1\14\3\0\3\14\1\0\7\14\3\0\4\14"+
    "\2\0\6\14\4\0\15\14\5\0\3\14\1\0\7\14\53\0\1\0"+
    "\1\0\107\0\1\14\15\0\1\14\20\0\15\14\145\0\1\14\4\0"+
    "\1\14\2\0\12\14\1\0\1\14\3\0\5\14\6\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14\5\0"+
    "\5\14\4\0\1\14\64\0\2\14\u0a7b\0\57\14\1\0\57\14\1\0"+
    "\205\14\6\0\4\14\3\0\2\14\14\0\46\14\1\0\1\14\5\0"+
    "\1\14\2\0\70\14\7\0\1\14\20\0\27\14\11\0\7\14\1\0"+
    "\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14\1\0"+
    "\7\14\1\0\7\14\120\0\1\14\u01d5\0\2\14\52\0\5\14\5\0"+
    "\2\14\4\0\126\14\6\0\3\14\1\0\132\14\1\0\4\14\5\0"+
    "\51\14\3\0\136\14\21\0\33\14\65\0\20\14\u0200\0\u19b6\14\112\0"+
    "\u51d6\14\52\0\u048d\14\103\0\56\14\2\0\u010d\14\3\0\20\14\12\13"+
    "\2\14\24\0\57\14\20\0\37\14\2\0\106\14\61\0\11\14\2\0"+
    "\147\14\2\0\44\14\1\0\10\14\77\0\13\14\1\0\3\14\1\0"+
    "\4\14\1\0\27\14\35\0\64\14\16\0\62\14\34\0\12\13\30\0"+
    "\6\14\3\0\1\14\1\0\1\14\2\0\12\13\34\14\12\0\27\14"+
    "\31\0\35\14\7\0\57\14\34\0\1\14\12\13\6\0\5\14\1\0"+
    "\12\14\12\13\5\14\1\0\51\14\27\0\3\14\1\0\10\14\4\0"+
    "\12\13\6\0\27\14\3\0\1\14\3\0\62\14\1\0\1\14\3\0"+
    "\2\14\2\0\5\14\2\0\1\14\1\0\1\14\30\0\3\14\2\0"+
    "\13\14\7\0\3\14\14\0\6\14\2\0\6\14\2\0\6\14\11\0"+
    "\7\14\1\0\7\14\1\0\53\14\1\0\12\14\12\0\163\14\15\0"+
    "\12\13\6\0\u2ba4\14\14\0\27\14\4\0\61\14\u2104\0\u016e\14\2\0"+
    "\152\14\46\0\7\14\14\0\5\14\5\0\1\14\1\0\12\14\1\0"+
    "\15\14\1\0\5\14\1\0\1\14\1\0\2\14\1\0\2\14\1\0"+
    "\154\14\41\0\u016b\14\22\0\100\14\2\0\66\14\50\0\14\14\164\0"+
    "\5\14\1\0\207\14\23\0\12\13\7\0\32\14\6\0\32\14\13\0"+
    "\131\14\3\0\6\14\2\0\6\14\2\0\6\14\2\0\3\14\43\0"+
    "\14\14\1\0\32\14\1\0\23\14\1\0\2\14\1\0\17\14\2\0"+
    "\16\14\42\0\173\14\u0185\0\35\14\3\0\61\14\57\0\40\14\20\0"+
    "\21\14\1\0\10\14\6\0\46\14\12\0\36\14\2\0\44\14\4\0"+
    "\10\14\60\0\236\14\2\0\12\13\6\0\44\14\4\0\44\14\4\0"+
    "\50\14\10\0\64\14\234\0\u0137\14\11\0\26\14\12\0\10\14\230\0"+
    "\6\14\2\0\1\14\1\0\54\14\1\0\2\14\3\0\1\14\2\0"+
    "\27\14\12\0\27\14\11\0\37\14\101\0\23\14\1\0\2\14\12\0"+
    "\26\14\12\0\32\14\106\0\70\14\6\0\2\14\100\0\1\14\17\0"+
    "\4\14\1\0\3\14\1\0\33\14\54\0\35\14\3\0\35\14\43\0"+
    "\10\14\1\0\34\14\33\0\66\14\12\0\26\14\12\0\23\14\15\0"+
    "\22\14\156\0\111\14\67\0\63\14\15\0\63\14\u0310\0\65\14\56\0"+
    "\12\13\23\0\55\14\40\0\31\14\7\0\12\13\11\0\44\14\17\0"+
    "\12\13\20\0\43\14\3\0\1\14\14\0\60\14\16\0\4\14\13\0"+
    "\12\13\1\14\1\0\1\14\43\0\22\14\1\0\31\14\124\0\7\14"+
    "\1\0\1\14\1\0\4\14\1\0\17\14\1\0\12\14\7\0\57\14"+
    "\21\0\12\13\13\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\2\14\1\0\5\14\3\0\1\14\22\0\1\14\14\0\5\14"+
    "\236\0\65\14\22\0\4\14\5\0\12\13\46\0\60\14\24\0\2\14"+
    "\1\0\1\14\10\0\12\13\246\0\57\14\51\0\4\14\44\0\60\14"+
    "\24\0\1\14\13\0\12\13\46\0\53\14\25\0\12\13\66\0\32\14"+
    "\26\0\12\13\u0166\0\100\14\12\13\25\0\1\14\u01c0\0\71\14\u0107\0"+
    "\11\14\1\0\45\14\21\0\1\14\17\0\12\13\30\0\36\14\u0370\0"+
    "\u039a\14\346\0\304\14\u0abc\0\u042f\14\u0fd1\0\u0247\14\u21b9\0\u0239\14\7\0"+
    "\37\14\1\0\12\13\146\0\36\14\22\0\60\14\20\0\4\14\14\0"+
    "\12\13\11\0\25\14\5\0\23\14\u0370\0\105\14\13\0\1\14\102\0"+
    "\15\14\100\0\1\14\37\0\u17ed\14\23\0\u02f3\14\u250d\0\2\14\u0bfe\0"+
    "\153\14\5\0\15\14\3\0\11\14\7\0\12\14\u1766\0\125\14\1\0"+
    "\107\14\1\0\2\14\2\0\1\14\2\0\2\14\2\0\4\14\1\0"+
    "\14\14\1\0\1\14\1\0\7\14\1\0\101\14\1\0\4\14\2\0"+
    "\10\14\1\0\7\14\1\0\34\14\1\0\4\14\1\0\5\14\1\0"+
    "\1\14\3\0\7\14\1\0\u0154\14\2\0\31\14\1\0\31\14\1\0"+
    "\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0\37\14\1\0"+
    "\31\14\1\0\37\14\1\0\31\14\1\0\10\14\2\0\62\13\u1000\0"+
    "\305\14\73\0\104\14\14\0\12\13\u04a6\0\4\14\1\0\33\14\1\0"+
    "\2\14\1\0\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0"+
    "\1\14\1\0\1\14\6\0\1\14\4\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\3\14\1\0\2\14\1\0\1\14\2\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\1\14\1\0\1\14\1\0\2\14\1\0"+
    "\1\14\2\0\4\14\1\0\7\14\1\0\4\14\1\0\4\14\1\0"+
    "\1\14\1\0\12\14\1\0\21\14\5\0\3\14\1\0\5\14\1\0"+
    "\21\14\u1144\0\ua6d7\14\51\0\u1035\14\13\0\336\14\2\0\u1682\14\u295e\0"+
    "\u021e\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\27\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\1\2\11\1\12\1\13\1\14\1\11\1\12"+
    "\1\15\1\16\1\17\1\20\1\21\3\11\1\22\1\23"+
    "\1\24\1\25\7\11\1\26\1\27\1\3\1\4\1\30"+
    "\1\31\1\13\1\11\1\20\1\21\1\4\3\32\1\7"+
    "\1\13\1\20\1\4\1\33\1\3\1\34\1\35\1\7"+
    "\1\36\1\1\1\37\2\11\1\40\1\41\1\42\1\43"+
    "\1\40\1\44\1\45\1\20\1\46\1\22\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\1\1\62\1\11\1\1\1\17\3\11\1\3"+
    "\1\5\1\13\1\14\1\63\1\16\1\17\1\11\1\24"+
    "\1\25\1\26\1\27\1\64\1\23\1\21\1\1\2\12"+
    "\1\65\1\3\2\11\1\66\1\26\1\27\3\67\1\70"+
    "\1\71\1\3\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\2\114\1\115\1\116\1\117"+
    "\1\120\2\121\1\120\1\4\3\120\1\122\1\123\1\124"+
    "\1\125\1\1\1\126\1\1\2\127\1\13\1\1\2\0"+
    "\2\130\3\5\1\131\1\0\1\132\1\0\1\132\1\133"+
    "\1\134\1\0\1\135\2\11\1\136\1\137\1\140\1\137"+
    "\1\141\1\142\1\143\1\144\1\11\1\145\3\11\1\146"+
    "\1\11\1\147\2\11\1\150\1\11\1\151\4\11\1\0"+
    "\1\152\1\153\1\0\1\154\1\155\1\11\1\0\5\32"+
    "\2\11\1\156\1\157\1\160\1\155\1\161\1\162\1\163"+
    "\1\0\1\11\1\164\1\165\1\166\2\0\1\167\1\0"+
    "\1\170\1\171\1\172\1\173\1\174\1\175\1\0\1\176"+
    "\1\177\1\200\1\201\1\202\1\203\1\204\1\205\1\206"+
    "\1\207\1\210\1\0\1\167\2\0\1\211\1\212\1\213"+
    "\2\11\2\130\1\131\1\11\1\153\1\155\1\147\1\11"+
    "\1\0\1\67\1\76\1\214\1\215\1\0\1\216\1\217"+
    "\1\220\1\221\1\222\1\223\1\224\2\225\1\4\1\0"+
    "\1\120\1\0\1\120\1\0\1\124\2\226\1\127\2\227"+
    "\11\0\3\131\1\0\1\230\2\0\2\11\1\231\1\232"+
    "\1\233\1\234\5\11\1\235\3\11\1\236\1\237\3\11"+
    "\1\0\2\240\1\0\2\241\1\242\1\243\1\244\3\0"+
    "\1\245\1\0\3\246\1\247\1\250\1\251\1\252\1\11"+
    "\1\0\1\11\1\0\2\11\1\242\1\4\4\120\5\0"+
    "\2\131\1\135\1\253\1\11\1\0\1\254\1\255\1\256"+
    "\1\257\1\260\1\261\1\262\1\11\1\263\3\11\1\240"+
    "\1\0\1\241\2\0\1\254\1\246\1\0\1\264\1\11"+
    "\3\130\1\265\1\120\2\0\1\120\3\0\2\11\1\266"+
    "\1\267\1\240\1\241\1\246\1\11\1\270\2\11\1\271";

  private static int [] zzUnpackAction() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u05d7\0\u0618\0\u0659\0\u05d7\0\u069a\0\u06db\0\u071c\0\u05d7"+
    "\0\u075d\0\u06db\0\u079e\0\u07df\0\u0820\0\u06db\0\u0861\0\u06db"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6"+
    "\0\u05d7\0\u09e7\0\u05d7\0\u05d7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb"+
    "\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\u06db\0\u05d7\0\u0d34\0\u0d75\0\u06db\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u05d7\0\u0fbe\0\u05d7"+
    "\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u05d7\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u05d7"+
    "\0\u138d\0\u05d7\0\u05d7\0\u05d7\0\u13ce\0\u140f\0\u1450\0\u1491"+
    "\0\u1103\0\u1103\0\u05d7\0\u05d7\0\u14d2\0\u1513\0\u1554\0\u138d"+
    "\0\u1595\0\u15d6\0\u1617\0\u1658\0\u1699\0\u16da\0\u1658\0\u1658"+
    "\0\u05d7\0\u1658\0\u1658\0\u171b\0\u1658\0\u1658\0\u175c\0\u179d"+
    "\0\u05d7\0\u17de\0\u05d7\0\u181f\0\u1860\0\u05d7\0\u05d7\0\u18a1"+
    "\0\u18e2\0\u1923\0\u05d7\0\u0e38\0\u0e79\0\u05d7\0\u1964\0\u19a5"+
    "\0\u05d7\0\u05d7\0\u19e6\0\u1a27\0\u05d7\0\u1a68\0\u05d7\0\u1aa9"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u1aea\0\u05d7\0\u05d7\0\u05d7"+
    "\0\u1b2b\0\u1b6c\0\u05d7\0\u05d7\0\u1bad\0\u1bee\0\u1c2f\0\u05d7"+
    "\0\u05d7\0\u1c70\0\u1cb1\0\u05d7\0\u1cf2\0\u1d33\0\u1d74\0\u1db5"+
    "\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u05d7"+
    "\0\u1fbd\0\u1ffe\0\u05d7\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143"+
    "\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u0c71\0\u05d7\0\u22c9"+
    "\0\u230a\0\u05d7\0\u05d7\0\u075d\0\u05d7\0\u234b\0\u238c\0\u23cd"+
    "\0\u240e\0\u05d7\0\u05d7\0\u244f\0\u05d7\0\u05d7\0\u05d7\0\u2490"+
    "\0\u24d1\0\u2512\0\u2553\0\u2594\0\u079e\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u079e\0\u275b\0\u279c\0\u27dd\0\u281e"+
    "\0\u285f\0\u05d7\0\u05d7\0\u28a0\0\u05d7\0\u28e1\0\u2922\0\u2963"+
    "\0\u05d7\0\u06db\0\u29a4\0\u29e5\0\u2a26\0\u2a26\0\u2a67\0\u05d7"+
    "\0\u05d7\0\u05d7\0\u2aa8\0\u05d7\0\u05d7\0\u05d7\0\u2ae9\0\u2b2a"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u10c2\0\u2b6b\0\u2bac\0\u0fbe\0\u05d7"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u2bed\0\u2c2e\0\u05d7\0\u2c6f"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u2cb0\0\u05d7\0\u2cf1\0\u05d7"+
    "\0\u05d7\0\u14d2\0\u05d7\0\u2d32\0\u2d73\0\u05d7\0\u2db4\0\u079e"+
    "\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u1658\0\u2f7b"+
    "\0\u05d7\0\u2fbc\0\u18a1\0\u2ffd\0\u303e\0\u05d7\0\u05d7\0\u19e6"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7"+
    "\0\u1bee\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u05d7"+
    "\0\u05d7\0\u3205\0\u3246\0\u05d7\0\u3287\0\u1f7c\0\u32c8\0\u3309"+
    "\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u0659\0\u05d7\0\u348f"+
    "\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u05d7"+
    "\0\u05d7\0\u05d7\0\u05d7\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b"+
    "\0\u05d7\0\u37dc\0\u381d\0\u385e\0\u079e\0\u079e\0\u389f\0\u38e0"+
    "\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u05d7"+
    "\0\u05d7\0\u05d7\0\u3ae8\0\u3b29\0\u3b6a\0\u2c2e\0\u2c6f\0\u3bab"+
    "\0\u3bec\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u3c2d\0\u3c6e"+
    "\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u1658\0\u3db3\0\u3df4\0\u3e35"+
    "\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u32c8\0\u06db"+
    "\0\u3ffc\0\u22c9\0\u05d7\0\u403d\0\u407e\0\u06db\0\u079e\0\u079e"+
    "\0\u079e\0\u079e\0\u079e\0\u079e\0\u40bf\0\u079e\0\u4100\0\u4141"+
    "\0\u4182\0\u41c3\0\u4204\0\u4245\0\u4286\0\u42c7\0\u05d7\0\u4308"+
    "\0\u4349\0\u079e\0\u438a\0\u2ffd\0\u43cb\0\u440c\0\u1658\0\u444d"+
    "\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u4655"+
    "\0\u079e\0\u079e\0\u4696\0\u46d7\0\u4349\0\u1699\0\u079e\0\u4718"+
    "\0\u4759\0\u079e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\42\1\43\2\42\1\43\1\44\1\45"+
    "\1\42\1\46\1\47\1\50\3\43\1\44\1\51\1\52"+
    "\1\53\1\42\1\54\1\55\1\34\1\56\1\57\1\43"+
    "\1\60\1\61\1\62\1\63\1\64\1\42\1\65\1\43"+
    "\1\66\1\67\2\43\1\70\1\71\1\43\1\72\1\43"+
    "\1\73\1\43\1\42\2\43\1\74\1\75\1\43\4\42"+
    "\1\30\1\31\1\32\1\76\1\77\1\42\1\100\1\37"+
    "\1\40\1\41\3\42\1\101\3\42\1\102\1\42\1\46"+
    "\6\42\1\30\1\52\1\53\1\103\1\104\1\105\1\106"+
    "\4\42\1\107\1\62\1\63\1\64\21\42\1\110\1\111"+
    "\5\42\1\30\1\31\1\32\1\76\1\77\1\42\1\100"+
    "\1\112\1\40\1\41\7\42\1\113\1\42\1\46\6\42"+
    "\1\51\1\52\1\53\1\103\1\114\1\42\1\115\4\42"+
    "\1\107\1\116\1\63\1\64\21\42\1\110\1\111\5\42"+
    "\1\30\1\31\1\32\1\117\1\34\1\120\1\121\1\122"+
    "\1\40\1\41\1\123\1\30\1\124\1\125\1\126\1\127"+
    "\1\130\1\131\1\132\1\126\1\133\1\134\3\127\1\130"+
    "\1\135\1\52\1\53\1\136\1\137\1\140\1\34\4\127"+
    "\1\141\1\142\1\63\1\64\1\143\15\127\1\144\2\127"+
    "\1\145\1\146\1\127\1\147\1\150\1\151\1\152\1\30"+
    "\1\31\1\32\1\117\1\34\1\120\1\121\1\122\1\40"+
    "\1\41\1\123\1\30\1\124\1\153\1\126\1\127\1\130"+
    "\1\131\1\132\1\126\1\133\1\134\3\127\1\130\1\135"+
    "\1\52\1\53\1\136\1\137\1\154\1\34\4\127\1\141"+
    "\1\142\1\63\1\64\1\143\15\127\1\144\2\127\1\145"+
    "\1\146\1\127\1\147\1\150\1\151\1\152\1\30\1\31"+
    "\1\32\1\117\1\34\1\120\1\121\1\122\1\40\1\41"+
    "\1\123\1\30\1\155\1\156\1\126\1\157\1\130\1\131"+
    "\1\132\1\126\1\133\1\134\3\157\1\130\1\135\1\52"+
    "\1\53\1\136\1\137\1\30\1\34\4\157\1\160\1\142"+
    "\1\63\1\64\1\143\15\157\1\144\2\157\1\145\1\146"+
    "\1\157\1\147\1\150\1\151\1\152\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\122\1\40\1\41\2\42"+
    "\1\43\2\42\1\43\1\44\1\45\1\42\1\46\1\47"+
    "\1\50\3\43\1\44\1\51\1\52\1\161\1\42\1\54"+
    "\1\55\1\34\1\56\1\162\1\43\1\163\1\61\1\62"+
    "\1\63\1\64\1\42\1\65\1\43\1\66\1\67\2\43"+
    "\1\70\1\71\1\43\1\72\1\43\1\73\1\43\1\42"+
    "\2\43\1\74\1\75\1\43\4\42\1\164\1\31\1\32"+
    "\1\165\1\34\1\166\1\164\1\37\1\40\1\41\7\164"+
    "\1\167\1\164\1\170\6\164\1\171\1\172\1\173\1\164"+
    "\1\104\1\164\1\34\3\164\1\174\1\164\1\116\1\175"+
    "\1\176\21\164\1\177\1\200\5\164\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\42"+
    "\1\43\2\42\1\43\1\44\1\45\1\42\1\46\1\47"+
    "\1\50\3\43\1\44\1\201\1\52\1\53\1\42\1\54"+
    "\1\55\1\34\1\56\1\57\1\43\1\60\1\61\1\202"+
    "\1\63\1\64\1\42\1\65\1\43\1\66\1\67\2\43"+
    "\1\70\1\71\1\43\1\72\1\43\1\73\1\43\1\42"+
    "\2\43\1\74\1\75\1\43\4\42\37\30\1\203\6\30"+
    "\1\62\41\30\1\204\10\30\1\205\4\30\1\206\3\30"+
    "\1\205\5\30\1\207\10\30\1\64\31\30\1\31\1\32"+
    "\1\210\1\34\1\166\1\30\1\122\1\40\1\41\1\211"+
    "\1\30\1\211\1\30\6\211\1\212\5\211\1\171\1\52"+
    "\2\211\1\104\1\213\1\34\4\211\1\61\1\116\1\63"+
    "\1\64\21\211\1\214\1\215\5\211\3\216\1\217\3\216"+
    "\1\220\1\221\22\216\1\222\45\216\1\30\1\31\1\32"+
    "\1\223\1\34\1\224\1\225\1\37\1\40\1\41\1\226"+
    "\2\30\1\125\1\227\2\230\1\102\1\231\1\232\1\233"+
    "\5\230\1\30\1\52\1\53\1\234\1\104\1\235\1\34"+
    "\4\230\1\236\1\62\1\237\1\240\1\241\15\230\1\30"+
    "\2\230\1\214\1\215\1\230\1\242\1\243\1\244\1\245"+
    "\3\246\1\247\44\246\1\250\24\246\1\250\3\246\50\30"+
    "\1\250\24\30\1\251\3\30\50\252\1\250\30\252\1\30"+
    "\1\31\1\32\1\33\1\34\1\42\1\36\1\37\1\40"+
    "\1\41\2\42\1\43\2\42\1\43\1\44\1\45\1\42"+
    "\1\46\1\47\1\50\3\43\1\44\1\30\1\52\1\53"+
    "\1\42\1\54\1\55\1\34\1\56\1\57\1\43\1\60"+
    "\1\61\1\62\1\63\1\64\1\42\1\65\1\43\1\66"+
    "\1\67\2\43\1\70\1\71\1\43\1\72\1\43\1\73"+
    "\1\43\1\42\2\43\1\74\1\75\1\43\4\42\1\253"+
    "\1\254\1\255\1\256\1\257\2\253\1\260\1\261\1\262"+
    "\7\253\1\30\12\253\1\30\1\253\1\30\1\253\1\257"+
    "\40\253\1\263\2\264\1\265\3\263\1\266\71\263\1\30"+
    "\1\31\1\32\1\267\1\270\2\30\1\271\1\40\1\41"+
    "\3\272\1\273\3\272\1\274\10\272\1\250\1\52\1\53"+
    "\1\272\1\275\1\273\1\270\4\272\1\30\1\116\2\273"+
    "\21\272\2\30\5\272\14\0\1\276\2\0\1\276\6\0"+
    "\3\276\10\0\4\276\5\0\15\276\1\0\2\276\2\0"+
    "\1\276\21\0\1\277\165\0\1\31\77\0\1\42\1\300"+
    "\1\301\76\42\1\302\2\0\1\303\1\302\1\304\1\305"+
    "\3\302\7\304\1\302\10\304\3\302\1\304\1\302\1\304"+
    "\1\302\4\304\4\302\21\304\2\302\5\304\3\0\1\306"+
    "\1\0\2\42\3\0\7\42\1\0\10\42\3\0\1\42"+
    "\1\0\1\42\1\0\4\42\4\0\21\42\2\0\5\42"+
    "\5\0\3\307\1\40\1\310\2\0\1\311\2\0\1\311"+
    "\1\307\1\0\2\307\1\0\1\307\3\311\1\307\3\0"+
    "\1\307\1\0\1\312\1\0\4\311\2\0\1\313\2\0"+
    "\15\311\1\0\2\311\2\0\1\311\2\0\1\307\1\0"+
    "\11\314\1\315\67\314\3\0\1\306\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\316\5\43"+
    "\3\0\1\42\1\0\1\317\1\0\4\43\1\320\3\0"+
    "\1\42\15\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\306\1\0\2\42\3\0\6\42\1\44\1\0\3\42"+
    "\1\44\3\42\1\44\3\0\1\42\1\0\1\42\1\0"+
    "\4\42\4\0\21\42\2\0\5\42\20\0\1\321\1\322"+
    "\3\0\1\323\3\0\1\321\3\0\1\323\34\0\1\324"+
    "\11\0\1\306\1\0\2\42\3\0\7\42\1\0\10\42"+
    "\3\0\1\42\1\0\1\42\1\0\4\42\1\325\3\0"+
    "\21\42\2\0\5\42\21\0\1\326\14\0\1\327\45\0"+
    "\1\306\1\0\2\42\3\0\7\42\1\0\10\42\3\0"+
    "\1\42\1\0\1\330\1\331\4\42\4\0\21\42\2\0"+
    "\5\42\3\0\1\306\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\316\5\43\3\0\1\42"+
    "\1\0\1\317\1\0\1\43\1\332\2\43\1\320\3\0"+
    "\1\42\10\43\1\333\1\43\1\334\2\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\306\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\316\5\43"+
    "\3\0\1\42\1\0\1\317\1\0\4\43\1\320\3\0"+
    "\1\42\7\43\1\335\5\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\306\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\316\5\43\3\0\1\42"+
    "\1\0\1\317\1\0\4\43\1\320\3\0\1\42\6\43"+
    "\1\336\6\43\1\42\2\43\2\0\1\43\4\42\46\0"+
    "\1\337\35\0\1\306\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\316\5\43\3\0\1\42"+
    "\1\0\1\317\1\0\4\43\1\320\3\0\1\42\1\43"+
    "\1\340\13\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\306\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\316\5\43\3\0\1\42\1\0\1\317"+
    "\1\0\3\43\1\341\1\320\3\0\1\42\15\43\1\42"+
    "\2\43\2\0\1\43\4\42\3\0\1\306\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\316"+
    "\5\43\3\0\1\42\1\0\1\317\1\0\4\43\1\320"+
    "\3\0\1\42\4\43\1\342\10\43\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\306\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\316\5\43\3\0"+
    "\1\42\1\0\1\317\1\0\3\43\1\343\1\320\3\0"+
    "\1\42\15\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\306\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\316\5\43\3\0\1\42\1\0\1\317"+
    "\1\0\1\43\1\344\2\43\1\320\3\0\1\42\4\43"+
    "\1\345\4\43\1\346\3\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\306\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\316\5\43\3\0\1\42"+
    "\1\0\1\317\1\0\4\43\1\320\3\0\1\42\5\43"+
    "\1\347\7\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\306\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\316\5\43\3\0\1\42\1\0\1\317"+
    "\1\0\4\43\1\320\3\0\1\42\12\43\1\350\2\43"+
    "\1\42\2\43\2\0\1\43\4\42\21\0\1\351\14\0"+
    "\1\352\33\0\1\353\27\0\1\354\50\0\1\355\1\356"+
    "\5\0\2\42\1\357\76\42\3\0\1\360\100\0\1\306"+
    "\1\0\2\42\3\0\7\42\1\0\10\42\3\0\1\42"+
    "\1\0\1\42\1\0\4\42\1\361\3\0\21\42\2\0"+
    "\5\42\3\0\1\306\1\0\2\42\3\0\7\42\1\0"+
    "\4\42\1\362\1\42\1\362\1\42\3\0\1\42\1\0"+
    "\1\42\1\0\1\362\2\42\1\363\4\0\1\42\4\362"+
    "\1\364\1\365\1\366\6\362\1\42\1\367\1\365\2\0"+
    "\1\362\4\42\21\0\1\326\62\0\1\360\11\0\1\370"+
    "\130\0\1\371\21\0\1\372\103\0\1\353\101\0\1\373"+
    "\12\0\3\307\1\40\1\310\2\0\1\311\2\0\1\311"+
    "\1\307\1\0\2\307\1\0\1\307\3\311\1\307\3\0"+
    "\1\307\1\0\1\312\1\0\4\311\1\0\1\374\1\313"+
    "\2\0\15\311\1\0\2\311\2\0\1\311\2\0\1\307"+
    "\22\0\1\375\100\0\1\326\14\0\1\376\45\0\1\360"+
    "\11\0\1\377\63\0\2\126\1\u0100\76\126\45\0\1\u0101"+
    "\40\0\3\307\1\40\1\310\2\0\1\311\2\0\1\311"+
    "\1\307\1\0\2\307\1\0\1\307\3\311\1\307\3\0"+
    "\1\307\1\0\1\u0102\1\0\4\311\1\0\1\u0102\1\313"+
    "\2\0\15\311\1\0\2\311\2\0\1\311\2\0\1\307"+
    "\46\0\1\u0103\47\0\1\u0104\2\0\2\u0104\3\0\1\u0105"+
    "\5\u0104\5\0\1\u0106\1\0\4\u0104\1\320\4\0\15\u0104"+
    "\1\0\2\u0104\2\0\1\u0104\7\0\1\u0107\1\0\2\126"+
    "\7\0\3\126\2\0\1\126\1\0\5\126\7\0\4\126"+
    "\5\0\15\126\1\0\2\126\2\0\1\126\2\0\2\126"+
    "\3\0\1\u0107\1\0\2\126\5\0\1\u0104\1\0\1\126"+
    "\2\127\2\0\1\126\1\u0105\5\127\5\0\1\u0106\1\0"+
    "\4\127\1\320\4\0\15\127\1\0\2\127\2\0\1\127"+
    "\2\0\2\126\20\0\1\130\4\0\1\130\3\0\1\130"+
    "\70\0\1\322\23\0\1\u0108\55\0\1\u0109\22\0\1\u010a"+
    "\57\0\1\u010b\20\0\1\u010c\60\0\1\u010d\1\u010e\2\0"+
    "\1\u010d\101\0\1\u010f\103\0\1\u0110\7\0\1\u0111\54\0"+
    "\1\326\14\0\1\327\6\0\1\u0112\100\0\1\u0113\100\0"+
    "\1\u0114\24\0\1\u0115\53\0\1\u0116\25\0\1\u0117\52\0"+
    "\1\u0118\100\0\1\u0119\47\0\1\u011a\2\0\2\u011a\4\0"+
    "\5\u011a\5\0\1\u011b\1\0\4\u011a\5\0\15\u011a\1\0"+
    "\2\u011a\2\0\1\u011a\30\0\1\u011c\20\0\1\u011d\36\0"+
    "\1\u0107\1\0\2\126\5\0\1\u011a\1\0\1\126\2\157"+
    "\2\0\1\126\1\0\5\157\5\0\1\u011b\1\0\4\157"+
    "\5\0\15\157\1\0\2\157\2\0\1\157\2\0\2\126"+
    "\21\0\1\u011e\12\0\1\u011f\47\0\1\306\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\316"+
    "\5\43\3\0\1\42\1\0\1\317\1\0\4\43\1\320"+
    "\3\0\1\42\5\43\1\u0120\1\43\1\335\5\43\1\42"+
    "\2\43\2\0\1\43\4\42\3\0\1\306\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\316"+
    "\5\43\3\0\1\42\1\0\1\317\1\0\4\43\1\320"+
    "\3\0\1\42\2\43\1\u0121\3\43\1\336\6\43\1\42"+
    "\2\43\2\0\1\43\4\42\1\164\2\0\1\u0122\1\0"+
    "\2\164\3\0\20\164\3\0\1\164\1\0\1\164\1\0"+
    "\5\164\1\0\33\164\1\u0123\1\u0124\1\u0122\75\164\1\302"+
    "\2\0\3\302\1\u0125\72\302\1\164\2\0\1\u0122\1\0"+
    "\2\164\3\0\20\164\3\0\1\164\1\0\1\164\1\0"+
    "\5\164\1\0\5\164\1\u0126\25\164\2\0\1\u0122\1\0"+
    "\2\164\3\0\20\164\3\0\1\164\1\0\1\164\1\0"+
    "\5\164\1\0\23\164\1\u0127\7\164\2\0\1\u0122\1\0"+
    "\2\164\3\0\20\164\3\0\1\164\1\0\1\164\1\0"+
    "\5\164\1\0\24\164\1\u0128\5\164\46\0\1\u0129\101\0"+
    "\1\313\51\0\1\205\4\0\1\205\3\0\1\205\47\0"+
    "\2\211\1\u012a\76\211\3\0\1\u012b\1\0\3\211\2\0"+
    "\1\211\1\0\1\211\1\0\14\211\2\0\2\211\3\0"+
    "\4\211\4\0\21\211\2\0\5\211\3\0\1\u012b\1\0"+
    "\3\211\2\0\1\211\1\0\1\211\1\0\14\211\2\0"+
    "\2\211\3\0\4\211\1\325\3\0\21\211\2\0\5\211"+
    "\1\216\1\u0123\1\u012c\76\216\5\0\3\307\4\0\1\311"+
    "\2\0\1\311\1\307\1\0\2\307\1\0\1\307\3\311"+
    "\1\307\3\0\1\307\1\0\1\u0102\1\0\4\311\1\0"+
    "\1\u0102\1\313\2\0\15\311\1\0\2\311\2\0\1\311"+
    "\2\0\1\307\1\0\2\230\1\u012d\76\230\5\0\1\u012e"+
    "\105\0\1\u012f\71\0\1\u0130\13\0\2\230\4\0\5\230"+
    "\7\0\4\230\5\0\15\230\1\0\2\230\2\0\1\230"+
    "\26\0\2\u0131\126\0\1\u0132\124\0\1\u0133\27\0\1\u0134"+
    "\10\0\1\u0135\7\0\1\u0136\31\0\1\u0137\1\0\3\246"+
    "\1\247\44\246\1\0\24\246\1\u0138\6\246\1\247\71\246"+
    "\1\u0139\3\246\50\252\1\0\30\252\1\253\2\0\1\253"+
    "\1\0\14\253\1\0\12\253\1\0\1\253\1\0\1\253"+
    "\1\0\40\253\1\0\1\254\77\0\1\253\1\77\1\u013a"+
    "\1\253\1\0\14\253\1\0\12\253\1\0\1\253\1\0"+
    "\1\253\1\0\40\253\3\0\1\u013b\1\257\33\0\1\257"+
    "\40\0\1\253\2\0\1\253\1\0\3\253\1\261\1\262"+
    "\7\253\1\0\12\253\1\0\1\253\1\0\1\253\1\0"+
    "\40\253\1\u013c\2\u013d\1\u013c\1\u013d\3\u013c\1\253\10\u013c"+
    "\1\u013d\12\u013c\1\u013d\1\u013c\1\u013d\1\u013c\1\u013d\40\u013c"+
    "\1\u013e\2\u013f\1\u013e\1\u013f\4\u013e\1\253\7\u013e\1\u013f"+
    "\12\u013e\1\u013f\1\u013e\1\u013f\1\u013e\1\u013f\40\u013e\1\263"+
    "\3\0\3\263\1\0\71\263\1\0\2\264\105\0\1\u0140"+
    "\76\0\3\u0141\4\0\1\u0142\2\0\1\u0142\1\u0141\1\0"+
    "\2\u0141\1\0\1\u0141\3\u0142\1\u0141\3\0\1\u0141\1\0"+
    "\1\u0102\1\0\4\u0142\1\0\1\u0102\1\313\2\0\15\u0142"+
    "\1\0\2\u0142\2\0\1\u0142\2\0\1\u0141\1\0\2\272"+
    "\1\u0143\76\272\5\0\3\u0144\1\40\1\310\2\0\1\u0145"+
    "\2\0\1\u0145\1\u0144\1\0\2\u0144\1\0\1\u0144\3\u0145"+
    "\1\u0144\3\0\1\u0144\1\0\1\u0102\1\0\4\u0145\1\0"+
    "\1\u0102\1\313\2\0\15\u0145\1\0\2\u0145\2\0\1\u0145"+
    "\2\0\1\u0144\4\0\1\u0146\1\0\2\272\3\0\7\272"+
    "\1\0\10\272\3\0\1\272\1\0\1\272\1\0\4\272"+
    "\4\0\21\272\2\0\5\272\21\0\1\322\115\0\1\327"+
    "\56\0\1\276\2\0\2\276\4\0\5\276\7\0\4\276"+
    "\5\0\15\276\1\0\2\276\2\0\1\276\4\0\1\u0147"+
    "\1\u0148\3\u0147\2\u0149\1\u014a\4\u0147\1\u014b\1\u0147\1\u014c"+
    "\2\u014d\1\u0147\2\u014d\1\u014c\5\u014d\3\u0147\1\u014d\3\u0147"+
    "\4\u014d\5\u0147\15\u014d\1\u0147\2\u014d\2\u0147\1\u014d\2\u0147"+
    "\1\u014d\1\u014c\3\0\1\u014e\1\0\2\42\3\0\7\42"+
    "\1\0\10\42\3\0\1\42\1\0\1\42\1\0\4\42"+
    "\4\0\21\42\2\0\5\42\1\0\1\300\1\0\1\u014e"+
    "\1\0\2\42\3\0\7\42\1\0\10\42\3\0\1\42"+
    "\1\0\1\42\1\0\4\42\4\0\21\42\2\0\5\42"+
    "\1\302\2\0\76\302\1\304\1\42\1\357\76\304\1\302"+
    "\2\0\1\303\1\302\2\304\3\302\7\304\1\302\10\304"+
    "\3\302\1\304\1\302\1\304\1\302\4\304\4\302\21\304"+
    "\2\302\5\304\1\u0125\1\u014f\1\u0150\1\u0151\1\u0125\2\305"+
    "\3\u0125\7\305\1\u0125\10\305\3\u0125\1\305\1\u0125\1\305"+
    "\1\u0125\4\305\4\u0125\21\305\2\u0125\5\305\3\310\1\u0152"+
    "\5\310\1\315\67\310\14\0\1\311\2\0\2\311\4\0"+
    "\5\311\7\0\4\311\5\0\15\311\1\0\2\311\2\0"+
    "\1\311\7\0\1\306\1\0\2\42\3\0\7\42\1\0"+
    "\10\42\3\0\1\42\1\0\1\42\1\0\4\42\1\u0153"+
    "\3\0\21\42\2\0\5\42\3\0\1\u0154\1\0\2\42"+
    "\1\u0155\2\0\4\42\2\u0156\1\u0157\1\0\1\u0157\1\u0156"+
    "\2\u0157\3\u0156\1\u0157\3\0\1\u0157\1\0\1\42\1\0"+
    "\4\u0156\4\0\1\42\15\u0156\1\42\2\u0156\2\0\1\u0156"+
    "\2\42\2\u0156\46\0\1\u0158\52\0\1\321\4\0\1\321"+
    "\3\0\1\321\141\0\1\u0159\11\0\1\306\1\0\2\42"+
    "\3\0\7\42\1\0\10\42\3\0\1\42\1\0\1\42"+
    "\1\u015a\4\42\4\0\21\42\2\0\5\42\15\0\1\u015b"+
    "\66\0\1\306\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\316\5\43\3\0\1\42\1\0"+
    "\1\317\1\0\2\43\1\u015c\1\43\1\320\3\0\1\42"+
    "\15\43\1\42\2\43\2\0\1\43\4\42\3\0\1\306"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\316\5\43\3\0\1\42\1\0\1\317\1\0"+
    "\4\43\1\320\3\0\1\42\1\43\1\u015d\13\43\1\42"+
    "\2\43\2\0\1\43\4\42\3\0\1\306\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\316"+
    "\5\43\3\0\1\42\1\0\1\317\1\0\3\43\1\u015e"+
    "\1\320\3\0\1\42\15\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\306\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\316\5\43\3\0\1\42"+
    "\1\0\1\317\1\0\1\43\1\u015f\2\43\1\320\3\0"+
    "\1\42\2\43\1\u0160\12\43\1\42\2\43\2\0\1\43"+
    "\4\42\46\0\1\u0161\35\0\1\306\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\316\5\43"+
    "\3\0\1\42\1\0\1\317\1\0\4\43\1\320\3\0"+
    "\1\42\2\43\1\u0162\12\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\306\1\0\2\42\3\0\2\42\1\43"+
    "\2\42\2\43\1\0\2\42\1\316\5\43\3\0\1\42"+
    "\1\0\1\317\1\0\4\43\1\320\3\0\1\42\6\43"+
    "\1\u0163\6\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\306\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\316\5\43\3\0\1\42\1\0\1\317"+
    "\1\0\4\43\1\320\3\0\1\42\5\43\1\u0164\7\43"+
    "\1\42\2\43\2\0\1\43\4\42\3\0\1\306\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\316\5\43\3\0\1\42\1\0\1\317\1\0\1\u0165"+
    "\3\43\1\320\3\0\1\42\15\43\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\306\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\316\5\43\3\0"+
    "\1\42\1\0\1\317\1\0\4\43\1\320\3\0\1\42"+
    "\10\43\1\u0166\4\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\306\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\316\5\43\3\0\1\42\1\0"+
    "\1\317\1\0\4\43\1\320\3\0\1\42\5\43\1\u0167"+
    "\7\43\1\42\2\43\2\0\1\43\4\42\3\0\1\306"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\316\5\43\3\0\1\42\1\0\1\317\1\0"+
    "\1\u0168\3\43\1\320\3\0\1\42\15\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\306\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\316\5\43"+
    "\3\0\1\42\1\0\1\317\1\0\1\43\1\u0169\2\43"+
    "\1\320\3\0\1\42\15\43\1\42\2\43\2\0\1\43"+
    "\4\42\3\0\1\u016a\1\u016b\11\0\2\u016c\3\0\1\u016c"+
    "\2\0\3\u016c\7\0\1\u016b\4\u016c\5\0\15\u016c\1\0"+
    "\2\u016c\2\0\1\u016c\2\0\2\u016c\3\0\1\u016d\1\u016e"+
    "\11\0\2\u016f\3\0\1\u016f\2\0\3\u016f\7\0\1\u016e"+
    "\4\u016f\5\0\15\u016f\1\0\2\u016f\2\0\1\u016f\2\0"+
    "\2\u016f\35\0\1\u0170\35\0\1\u0171\6\0\1\42\1\0"+
    "\1\306\1\0\2\42\3\0\7\42\1\0\10\42\3\0"+
    "\1\42\1\0\1\42\1\0\4\42\4\0\21\42\2\0"+
    "\5\42\1\0\1\77\1\u013a\101\0\1\306\1\0\2\42"+
    "\3\0\7\42\1\0\10\42\3\0\1\42\1\0\1\42"+
    "\1\0\4\42\4\0\10\42\1\362\6\42\1\362\1\42"+
    "\2\0\5\42\3\0\1\306\1\0\2\42\3\0\7\42"+
    "\1\0\10\42\3\0\1\42\1\0\1\42\1\0\1\362"+
    "\3\42\4\0\21\42\2\0\5\42\3\0\1\306\1\0"+
    "\2\42\3\0\7\42\1\0\10\42\3\0\1\42\1\0"+
    "\1\42\1\0\1\362\2\42\1\362\4\0\21\42\2\0"+
    "\5\42\3\0\1\306\1\0\2\42\3\0\7\42\1\0"+
    "\10\42\3\0\1\42\1\0\1\42\1\0\4\42\4\0"+
    "\17\42\1\362\1\42\2\0\5\42\35\0\1\u0170\60\0"+
    "\1\u0172\64\0\1\126\1\0\1\u0107\1\0\2\126\7\0"+
    "\3\126\2\0\1\126\1\0\5\126\7\0\4\126\5\0"+
    "\15\126\1\0\2\126\2\0\1\126\2\0\2\126\45\0"+
    "\1\u0153\36\0\1\u0173\3\0\1\u0155\6\0\2\u0174\1\u0175"+
    "\1\0\1\u0175\1\u0174\2\u0175\3\u0174\1\u0175\3\0\1\u0175"+
    "\3\0\4\u0174\5\0\15\u0174\1\0\2\u0174\2\0\1\u0174"+
    "\2\0\2\u0174\25\0\1\u010d\3\0\1\u010d\67\0\1\u0176"+
    "\4\0\1\u0176\1\0\3\u0176\12\0\1\u0176\5\0\2\u0176"+
    "\1\0\1\u0176\3\0\1\u0176\23\0\1\u0177\13\0\1\u0178"+
    "\4\0\1\u0179\3\0\1\u0178\3\0\1\u017a\2\0\1\u0177"+
    "\105\0\1\u017b\70\0\1\u0170\7\0\1\u017c\100\0\1\u011d"+
    "\101\0\1\u017d\53\0\1\u017e\62\0\1\306\1\0\2\42"+
    "\3\0\2\42\1\43\2\42\2\43\1\0\2\42\1\316"+
    "\5\43\3\0\1\42\1\0\1\317\1\0\4\43\1\320"+
    "\3\0\1\42\1\43\1\u017f\13\43\1\42\2\43\2\0"+
    "\1\43\4\42\1\164\1\u0180\1\u0181\1\u0122\75\164\3\0"+
    "\1\u0182\75\0\1\164\1\u0123\1\0\1\u0183\1\0\2\164"+
    "\3\0\20\164\3\0\1\164\1\0\1\164\1\0\5\164"+
    "\1\0\32\164\1\u0125\1\u014f\1\u0150\76\u0125\1\164\2\0"+
    "\1\u0122\1\0\2\164\3\0\20\164\3\0\1\164\1\0"+
    "\1\164\1\0\5\164\1\0\4\164\1\u0184\26\164\2\0"+
    "\1\u0122\1\0\2\164\3\0\20\164\3\0\1\u0185\1\0"+
    "\1\164\1\0\5\164\1\0\32\164\1\0\1\211\1\0"+
    "\1\u012b\1\0\3\211\2\0\1\211\1\0\1\211\1\0"+
    "\14\211\2\0\2\211\3\0\4\211\4\0\21\211\2\0"+
    "\5\211\1\0\1\u0123\1\0\1\u0182\76\0\1\230\1\0"+
    "\1\u0130\13\0\2\230\4\0\5\230\7\0\4\230\5\0"+
    "\15\230\1\0\2\230\2\0\1\230\5\0\1\77\1\0"+
    "\1\360\76\0\1\257\1\u0186\76\0\1\u013c\2\u013d\1\u013c"+
    "\1\u013d\3\u013c\1\u0187\10\u013c\1\u013d\12\u013c\1\u013d\1\u013c"+
    "\1\u013d\1\u013c\1\u013d\40\u013c\10\u013d\1\u0188\70\u013d\1\u013e"+
    "\2\u013f\1\u013e\1\u013f\4\u013e\1\u0189\7\u013e\1\u013f\12\u013e"+
    "\1\u013f\1\u013e\1\u013f\1\u013e\1\u013f\40\u013e\11\u013f\1\u018a"+
    "\67\u013f\14\0\1\u0142\2\0\2\u0142\4\0\5\u0142\7\0"+
    "\4\u0142\5\0\15\u0142\1\0\2\u0142\2\0\1\u0142\5\0"+
    "\1\272\1\0\1\u0146\1\0\2\272\3\0\7\272\1\0"+
    "\10\272\3\0\1\272\1\0\1\272\1\0\4\272\4\0"+
    "\21\272\2\0\5\272\14\0\1\u0145\2\0\2\u0145\4\0"+
    "\5\u0145\7\0\4\u0145\5\0\15\u0145\1\0\2\u0145\2\0"+
    "\1\u0145\7\0\1\u018b\77\0\1\u0147\1\u018b\75\0\1\u0147"+
    "\1\u0148\1\u0147\1\u014c\1\u0147\2\u018c\1\u014c\6\u0147\2\u014c"+
    "\1\u018c\2\u0147\1\u014c\1\u0147\1\u018c\3\u014c\1\u018c\7\u0147"+
    "\4\u014c\5\u0147\15\u014c\1\u0147\2\u014c\2\u0147\1\u014c\2\u0147"+
    "\2\u014c\3\0\1\u018b\3\0\1\u018b\74\0\1\u018b\3\0"+
    "\1\u018b\4\0\1\u018d\2\0\1\u018d\1\u018e\4\0\1\u018e"+
    "\3\u018d\1\u018e\7\0\4\u018d\5\0\15\u018d\1\0\2\u018d"+
    "\2\0\1\u018d\4\0\1\u0147\1\u0148\1\u0147\1\u014c\1\u0147"+
    "\2\u0149\1\u014a\4\u0147\1\u014b\1\u0147\1\u014c\2\u014d\1\u0147"+
    "\2\u014d\1\u014c\5\u014d\3\u0147\1\u014d\1\u0147\1\u018f\1\u0147"+
    "\4\u014d\5\u0147\15\u014d\1\u0147\2\u014d\2\u0147\1\u014d\2\u0147"+
    "\1\u014d\1\u014c\1\u0147\1\u0148\1\u0147\1\u014c\1\u0147\2\u0149"+
    "\1\u014d\4\u0147\1\u014b\1\u0147\1\u014c\2\u014d\1\u0147\2\u014d"+
    "\1\u014c\5\u014d\3\u0147\1\u014d\1\u0147\1\u018f\1\u0147\4\u014d"+
    "\5\u0147\15\u014d\1\u0147\2\u014d\2\u0147\1\u014d\2\u0147\1\u014d"+
    "\1\u014c\1\0\1\u014f\77\0\1\305\1\u0190\1\u0191\76\305"+
    "\3\310\1\u0152\5\310\1\u0192\67\310\46\0\1\u0193\32\0"+
    "\2\u0156\1\u0194\76\u0156\5\0\3\u0175\4\0\1\u0195\2\0"+
    "\1\u0195\1\u0175\1\0\2\u0175\1\0\1\u0175\3\u0195\1\u0175"+
    "\3\0\1\u0175\3\0\4\u0195\5\0\15\u0195\1\0\2\u0195"+
    "\2\0\1\u0195\2\0\1\u0175\4\0\1\u0154\1\0\2\u0156"+
    "\1\u0155\2\0\3\42\1\u0196\3\u0156\1\0\1\u0157\1\u0156"+
    "\1\u0157\5\u0156\3\0\1\u0157\1\0\1\42\1\0\4\u0156"+
    "\4\0\1\42\15\u0156\1\42\2\u0156\2\0\1\u0156\2\42"+
    "\2\u0156\3\0\1\u0154\1\0\2\42\1\u0155\2\0\3\42"+
    "\1\u0196\2\u0156\1\u0157\1\0\1\u0157\1\u0156\2\u0157\3\u0156"+
    "\1\u0157\3\0\1\u0157\1\0\1\42\1\0\4\u0156\4\0"+
    "\1\42\15\u0156\1\42\2\u0156\2\0\1\u0156\2\42\2\u0156"+
    "\3\0\1\306\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\316\5\43\3\0\1\42\1\0"+
    "\1\317\1\0\3\43\1\u0197\1\320\3\0\1\42\15\43"+
    "\1\42\2\43\2\0\1\43\4\42\3\0\1\306\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\316\5\43\3\0\1\42\1\0\1\317\1\0\4\43"+
    "\1\320\3\0\1\42\14\43\1\u0198\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\306\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\316\5\43\3\0"+
    "\1\42\1\0\1\317\1\0\4\43\1\320\3\0\1\42"+
    "\5\43\1\u0199\7\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\306\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\316\5\43\3\0\1\42\1\0"+
    "\1\317\1\0\4\43\1\320\3\0\1\42\7\43\1\u019a"+
    "\5\43\1\42\2\43\2\0\1\43\4\42\3\0\1\306"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\316\5\43\3\0\1\42\1\0\1\317\1\0"+
    "\3\43\1\u019b\1\320\3\0\1\42\15\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\306\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\316\5\43"+
    "\3\0\1\42\1\0\1\317\1\0\3\43\1\u019c\1\320"+
    "\3\0\1\42\15\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\306\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\316\5\43\3\0\1\42\1\0"+
    "\1\317\1\0\3\43\1\u019d\1\320\3\0\1\42\15\43"+
    "\1\42\2\43\2\0\1\43\4\42\3\0\1\306\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\316\5\43\3\0\1\42\1\0\1\317\1\0\3\43"+
    "\1\u019e\1\320\3\0\1\42\15\43\1\42\2\43\2\0"+
    "\1\43\4\42\3\0\1\306\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\316\5\43\3\0"+
    "\1\42\1\0\1\317\1\0\4\43\1\320\3\0\1\42"+
    "\1\u019f\14\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\306\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\316\5\43\3\0\1\42\1\0\1\317"+
    "\1\0\1\43\1\u01a0\2\43\1\320\3\0\1\42\15\43"+
    "\1\42\2\43\2\0\1\43\4\42\3\0\1\306\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\316\5\43\3\0\1\42\1\0\1\317\1\0\4\43"+
    "\1\320\3\0\1\42\6\43\1\u01a1\6\43\1\42\2\43"+
    "\2\0\1\43\4\42\2\u016c\1\u01a2\76\u016c\3\0\1\u01a3"+
    "\100\0\1\u016a\1\0\2\u016c\7\0\3\u016c\2\0\1\u016c"+
    "\1\0\5\u016c\7\0\4\u016c\5\0\15\u016c\1\0\2\u016c"+
    "\2\0\1\u016c\2\0\2\u016c\2\u016f\1\u01a4\76\u016f\3\0"+
    "\1\u01a5\100\0\1\u016d\1\0\2\u016f\7\0\3\u016f\2\0"+
    "\1\u016f\1\0\5\u016f\7\0\4\u016f\5\0\15\u016f\1\0"+
    "\2\u016f\2\0\1\u016f\2\0\2\u016f\2\u0174\1\u01a6\76\u0174"+
    "\3\0\1\u0173\1\0\2\u0174\1\u0155\5\0\1\u01a7\3\u0174"+
    "\1\0\1\u0175\1\u0174\1\u0175\5\u0174\3\0\1\u0175\3\0"+
    "\4\u0174\5\0\15\u0174\1\0\2\u0174\2\0\1\u0174\2\0"+
    "\2\u0174\3\0\1\u0173\3\0\1\u0155\5\0\1\u01a7\2\u0174"+
    "\1\u0175\1\0\1\u0175\1\u0174\2\u0175\3\u0174\1\u0175\3\0"+
    "\1\u0175\3\0\4\u0174\5\0\15\u0174\1\0\2\u0174\2\0"+
    "\1\u0174\2\0\2\u0174\20\0\1\u0178\4\0\1\u0178\3\0"+
    "\1\u0178\74\0\1\u01a8\1\u01a9\2\0\1\u01a8\52\0\1\306"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\316\5\43\3\0\1\42\1\0\1\317\1\0"+
    "\4\43\1\320\3\0\1\42\1\u01aa\14\43\1\42\2\43"+
    "\2\0\1\43\4\42\1\164\2\0\1\u01ab\1\0\2\164"+
    "\3\0\20\164\3\0\1\164\1\0\1\164\1\0\5\164"+
    "\1\0\33\164\1\u0180\1\0\1\u0122\1\0\2\164\3\0"+
    "\20\164\3\0\1\164\1\0\1\164\1\0\5\164\1\0"+
    "\32\164\1\0\1\u0123\1\u01ac\76\0\1\164\1\u01ad\1\u01ae"+
    "\1\u0122\76\164\2\0\1\u0122\1\0\2\164\3\0\20\164"+
    "\3\0\1\164\1\0\1\164\1\0\5\164\1\0\3\164"+
    "\1\u01af\26\164\1\0\1\257\1\0\1\u013b\1\257\33\0"+
    "\1\257\40\0\1\253\2\0\1\253\1\0\2\253\1\u01b0"+
    "\1\261\10\253\1\0\12\253\1\0\1\253\1\0\1\253"+
    "\1\0\40\253\7\0\1\u01b1\1\u01b2\70\0\1\253\2\0"+
    "\1\253\1\0\2\253\1\u01b3\1\253\1\262\7\253\1\0"+
    "\12\253\1\0\1\253\1\0\1\253\1\0\40\253\7\0"+
    "\1\u01b4\1\0\1\u01b5\67\0\1\u0147\1\u0148\3\u0147\2\u0149"+
    "\1\u014a\4\u0147\1\u014b\1\u0147\1\u014c\2\u014d\1\u0147\2\u014d"+
    "\1\u014c\5\u014d\3\u0147\1\u014d\1\u0147\1\u018f\1\u0147\4\u014d"+
    "\5\u0147\15\u014d\1\u0147\2\u014d\2\u0147\1\u014d\2\u0147\1\u014d"+
    "\1\u014c\1\u0147\1\u0148\1\u0147\1\u014c\1\u0147\2\u018c\7\u0147"+
    "\2\u014c\1\u018c\2\u0147\1\u014c\1\u0147\1\u018c\3\u014c\1\u018c"+
    "\7\u0147\4\u014c\5\u0147\15\u014c\1\u0147\2\u014c\2\u0147\1\u014c"+
    "\2\u0147\2\u014c\7\0\1\u018b\4\0\1\u018d\2\0\1\u018d"+
    "\1\u018e\4\0\1\u018e\3\u018d\1\u018e\7\0\4\u018d\5\0"+
    "\15\u018d\1\0\2\u018d\2\0\1\u018d\20\0\1\u018d\2\0"+
    "\1\u018d\1\u018e\4\0\1\u018e\3\u018d\1\u018e\7\0\4\u018d"+
    "\5\0\15\u018d\1\0\2\u018d\2\0\1\u018d\5\0\1\u0190"+
    "\1\0\1\306\1\0\2\42\3\0\7\42\1\0\10\42"+
    "\3\0\1\42\1\0\1\42\1\0\4\42\4\0\21\42"+
    "\2\0\5\42\1\0\1\u0156\1\0\1\u0154\1\0\2\u0156"+
    "\1\u0155\2\0\3\42\1\u0196\3\u0156\1\0\1\u0157\1\u0156"+
    "\1\u0157\5\u0156\3\0\1\u0157\1\0\1\42\1\0\4\u0156"+
    "\4\0\1\42\15\u0156\1\42\2\u0156\2\0\1\u0156\2\42"+
    "\2\u0156\3\0\1\u0173\3\0\1\u0155\4\0\1\u0195\1\u01a7"+
    "\1\u0174\1\u01b6\1\u0195\1\0\1\u0175\1\u0174\1\u0175\1\u0195"+
    "\3\u01b6\1\u0195\3\0\1\u0175\3\0\4\u01b6\5\0\15\u01b6"+
    "\1\0\2\u01b6\2\0\1\u01b6\2\0\2\u0174\3\0\1\306"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\316\5\43\3\0\1\42\1\0\1\317\1\0"+
    "\4\43\1\320\3\0\1\42\1\u01b7\14\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\306\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\316\5\43"+
    "\3\0\1\42\1\0\1\317\1\0\1\u01b8\3\43\1\320"+
    "\3\0\1\42\15\43\1\42\2\43\2\0\1\43\4\42"+
    "\3\0\1\306\1\0\2\42\3\0\2\42\1\43\2\42"+
    "\2\43\1\0\2\42\1\316\5\43\3\0\1\42\1\0"+
    "\1\317\1\0\4\43\1\320\3\0\1\42\6\43\1\u01b9"+
    "\6\43\1\42\2\43\2\0\1\43\4\42\3\0\1\306"+
    "\1\0\2\42\3\0\2\42\1\43\2\42\2\43\1\0"+
    "\2\42\1\316\5\43\3\0\1\42\1\0\1\317\1\0"+
    "\3\43\1\u01ba\1\320\3\0\1\42\15\43\1\42\2\43"+
    "\2\0\1\43\4\42\1\0\1\u016c\1\0\1\u016a\1\0"+
    "\2\u016c\7\0\3\u016c\2\0\1\u016c\1\0\5\u016c\7\0"+
    "\4\u016c\5\0\15\u016c\1\0\2\u016c\2\0\1\u016c\2\0"+
    "\2\u016c\1\0\1\u016b\1\u01bb\77\0\1\u016f\1\0\1\u016d"+
    "\1\0\2\u016f\7\0\3\u016f\2\0\1\u016f\1\0\5\u016f"+
    "\7\0\4\u016f\5\0\15\u016f\1\0\2\u016f\2\0\1\u016f"+
    "\2\0\2\u016f\1\0\1\u016e\1\u01bc\77\0\1\u0174\1\0"+
    "\1\u0173\1\0\2\u0174\1\u0155\5\0\1\u01a7\3\u0174\1\0"+
    "\1\u0175\1\u0174\1\u0175\5\u0174\3\0\1\u0175\3\0\4\u0174"+
    "\5\0\15\u0174\1\0\2\u0174\2\0\1\u0174\2\0\2\u0174"+
    "\25\0\1\u01a8\3\0\1\u01a8\67\0\1\u01bd\4\0\1\u01bd"+
    "\1\0\3\u01bd\12\0\1\u01bd\5\0\2\u01bd\1\0\1\u01bd"+
    "\3\0\1\u01bd\17\0\1\164\1\0\1\164\1\u0122\76\164"+
    "\2\0\1\u01be\1\0\2\164\3\0\20\164\3\0\1\164"+
    "\1\0\1\164\1\0\5\164\1\0\33\164\1\u01ad\1\0"+
    "\1\u0183\1\0\2\164\3\0\20\164\3\0\1\164\1\0"+
    "\1\164\1\0\5\164\1\0\32\164\1\253\2\0\1\253"+
    "\1\0\3\253\1\261\10\253\1\0\12\253\1\0\1\253"+
    "\1\0\1\253\1\0\40\253\10\0\1\u01b2\70\0\10\u013d"+
    "\1\0\70\u013d\1\253\2\0\1\253\1\0\4\253\1\262"+
    "\7\253\1\0\12\253\1\0\1\253\1\0\1\253\1\0"+
    "\40\253\11\0\1\u01b5\67\0\11\u013f\1\0\67\u013f\3\0"+
    "\1\u0173\1\0\2\u0174\1\u0155\4\0\1\u0195\1\u01a7\1\u0174"+
    "\2\u01b6\1\0\1\u0175\1\u0174\1\u0175\5\u01b6\3\0\1\u0175"+
    "\3\0\4\u01b6\5\0\15\u01b6\1\0\2\u01b6\2\0\1\u01b6"+
    "\2\0\2\u0174\3\0\1\306\1\0\2\42\3\0\2\42"+
    "\1\43\2\42\2\43\1\0\2\42\1\316\5\43\3\0"+
    "\1\42\1\0\1\317\1\0\1\u01bf\3\43\1\320\3\0"+
    "\1\42\15\43\1\42\2\43\2\0\1\43\4\42\3\0"+
    "\1\306\1\0\2\42\3\0\2\42\1\43\2\42\2\43"+
    "\1\0\2\42\1\316\5\43\3\0\1\42\1\0\1\317"+
    "\1\0\1\43\1\u01c0\2\43\1\320\3\0\1\42\15\43"+
    "\1\42\2\43\2\0\1\43\4\42\1\0\1\u016b\1\0"+
    "\1\u01a3\76\0\1\u016e\1\0\1\u01a5\100\0\1\306\1\0"+
    "\2\42\3\0\2\42\1\43\2\42\2\43\1\0\2\42"+
    "\1\316\5\43\3\0\1\42\1\0\1\317\1\0\4\43"+
    "\1\320\3\0\1\42\4\43\1\u01c1\10\43\1\42\2\43"+
    "\2\0\1\43\4\42\3\0\1\306\1\0\2\42\3\0"+
    "\2\42\1\43\2\42\2\43\1\0\2\42\1\316\5\43"+
    "\3\0\1\42\1\0\1\317\1\0\4\43\1\320\3\0"+
    "\1\42\5\43\1\u01c2\7\43\1\42\2\43\2\0\1\43"+
    "\4\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18330];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\0\2\11\2\1\1\11\3\1\1\11\10\1\3\11"+
    "\5\1\1\11\1\1\2\11\15\1\1\11\13\1\1\11"+
    "\1\1\1\11\4\1\1\11\12\1\1\11\1\1\3\11"+
    "\6\1\2\11\14\1\1\11\7\1\1\11\1\1\1\11"+
    "\2\1\2\11\3\1\1\11\2\1\1\11\2\1\2\11"+
    "\2\1\1\11\1\1\1\11\1\1\4\11\1\1\3\11"+
    "\2\1\2\11\3\1\2\11\2\1\1\11\13\1\1\11"+
    "\2\1\1\11\3\1\1\0\6\1\1\0\1\11\1\0"+
    "\1\1\2\11\1\0\1\11\4\1\2\11\1\1\3\11"+
    "\21\1\1\0\2\11\1\0\1\11\2\1\1\0\1\11"+
    "\6\1\3\11\1\1\3\11\1\0\1\1\3\11\2\0"+
    "\1\1\1\0\5\11\1\1\1\0\1\11\1\1\4\11"+
    "\1\1\1\11\1\1\2\11\1\0\1\11\2\0\1\11"+
    "\12\1\1\11\1\1\1\0\2\1\2\11\1\0\10\11"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\2\11\2\1"+
    "\1\11\1\1\11\0\1\11\2\1\1\0\1\1\2\0"+
    "\2\1\4\11\5\1\1\11\10\1\1\0\2\1\1\0"+
    "\2\1\3\11\3\0\1\1\1\0\2\1\5\11\1\1"+
    "\1\0\1\1\1\0\10\1\4\0\4\1\1\11\1\1"+
    "\1\0\15\1\1\0\1\1\2\0\1\11\1\1\1\0"+
    "\7\1\2\0\1\1\3\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[450];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
    @Override
    protected int yychar() {
        return yychar;
    }

    @Override
    protected int yyline() {
        return yyline;
    }

    @Override
    protected int yycolumn() {
        return yycolumn;
    }

    /**
     * Closes a {@code here_string} content token if the lexer is currently reading a here string
     */
    protected void closeHereStringIfAvailable() {
        if (yystate() == X_HERE_STRING) {
            if (isInHereStringContent()) {
                leaveHereStringContent();
            }
            backToPreviousState();
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BashLexerBase(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2652) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream
   *
   * @throws java.io.IOException if an error occurred while closing the reader
   */
  protected final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to {@code ZZ_INITIAL}.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  protected final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  protected final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  protected final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  protected final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  protected final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  protected final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  protected void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  protected Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return token(TokenType.BAD_CHARACTER);
            } 
            // fall through
          case 186: break;
          case 2: 
            { if (yystate() == X_HERE_STRING) {
                                                closeHereStringIfAvailable();
                                                return token(TokenType.LINE_FEED);
                                            } else if ((yystate() == S_PARAM_EXPANSION || yystate() == S_SUBSHELL || yystate() == S_ARITH || yystate() == S_ARITH_SQUARE_MODE) && isInState(X_HEREDOC)) {
                                                backToPreviousState();
                                                return token(TokenType.LINE_FEED);
                                            }

                                            if (!heredocState().isEmpty()) {
                                                // first linebreak after the start marker
                                                goToState(X_HEREDOC);
                                                return token(TokenType.LINE_FEED);
                                            }

                                           return token(TokenType.LINE_FEED);
            } 
            // fall through
          case 187: break;
          case 3: 
            { return token(TokenType.BACKSLASH);
            } 
            // fall through
          case 188: break;
          case 4: 
            { return token(TokenType.WHITESPACE);
            } 
            // fall through
          case 189: break;
          case 5: 
            { return token(TokenType.COMMENT);
            } 
            // fall through
          case 190: break;
          case 6: 
            { return token(TokenType.BANG_TOKEN);
            } 
            // fall through
          case 191: break;
          case 7: 
            { return token(TokenType.DOLLAR);
            } 
            // fall through
          case 192: break;
          case 8: 
            { stringParsingState().enterString(); if (yystate() == X_HERE_STRING && !isInHereStringContent()) enterHereStringContent();
goToState(X_STRINGMODE); return token(TokenType.STRING_BEGIN);
            } 
            // fall through
          case 193: break;
          case 9: 
            { return token(TokenType.WORD);
            } 
            // fall through
          case 194: break;
          case 10: 
            { return token(TokenType.INTEGER_LITERAL);
            } 
            // fall through
          case 195: break;
          case 11: 
            { closeHereStringIfAvailable(); return token(TokenType.AMP);
            } 
            // fall through
          case 196: break;
          case 12: 
            { return token(TokenType.AT);
            } 
            // fall through
          case 197: break;
          case 13: 
            { return token(TokenType.RIGHT_PAREN);
            } 
            // fall through
          case 198: break;
          case 14: 
            { if (yystate() == S_BACKQUOTE) backToPreviousState(); else goToState(S_BACKQUOTE); return token(TokenType.BACKQUOTE);
            } 
            // fall through
          case 199: break;
          case 15: 
            { closeHereStringIfAvailable(); return token(TokenType.SEMI);
            } 
            // fall through
          case 200: break;
          case 16: 
            { return token(TokenType.PIPE);
            } 
            // fall through
          case 201: break;
          case 17: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH_SQUARE_MODE); return token(TokenType.EXPR_ARITH_SQUARE);
            } 
            // fall through
          case 202: break;
          case 18: 
            { return token(TokenType.EQ);
            } 
            // fall through
          case 203: break;
          case 19: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); stringParsingState().enterSubshell(); goToState(S_SUBSHELL); return token(TokenType.LEFT_PAREN);
            } 
            // fall through
          case 204: break;
          case 20: 
            { return token(TokenType.LEFT_CURLY);
            } 
            // fall through
          case 205: break;
          case 21: 
            { if (yystate() == X_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return token(TokenType.HEREDOC_LINE); return token(TokenType.RIGHT_CURLY);
            } 
            // fall through
          case 206: break;
          case 22: 
            { return token(TokenType.GREATER_THAN);
            } 
            // fall through
          case 207: break;
          case 23: 
            { return token(TokenType.LESS_THAN);
            } 
            // fall through
          case 208: break;
          case 24: 
            { return token(TokenType.COND_OP_NOT);
            } 
            // fall through
          case 209: break;
          case 25: 
            { if (isEmptyConditionalCommand()) {
                                    setEmptyConditionalCommand(false);
                                    backToPreviousState();
                                    return token(TokenType.EXPR_CONDITIONAL_END);
                                 } else {
                                    setEmptyConditionalCommand(false);
                                    return token(TokenType.WORD);
                                 }
            } 
            // fall through
          case 210: break;
          case 26: 
            { return token(TokenType.COND_OP);
            } 
            // fall through
          case 211: break;
          case 27: 
            { return token(TokenType.LEFT_PAREN);
            } 
            // fall through
          case 212: break;
          case 28: 
            { return token(TokenType.ARITH_BASE_CHAR);
            } 
            // fall through
          case 213: break;
          case 29: 
            { return token(TokenType.ARITH_NEGATE);
            } 
            // fall through
          case 214: break;
          case 30: 
            { return token(TokenType.ARITH_BITWISE_XOR);
            } 
            // fall through
          case 215: break;
          case 31: 
            { return token(TokenType.RIGHT_SQUARE);
            } 
            // fall through
          case 216: break;
          case 32: 
            { return token(TokenType.ARITH_NUMBER);
            } 
            // fall through
          case 217: break;
          case 33: 
            { return token(TokenType.ARITH_BITWISE_AND);
            } 
            // fall through
          case 218: break;
          case 34: 
            { return token(TokenType.ARITH_MULT);
            } 
            // fall through
          case 219: break;
          case 35: 
            { return token(TokenType.ARITH_PLUS);
            } 
            // fall through
          case 220: break;
          case 36: 
            { decOpenParenthesisCount(); return token(TokenType.RIGHT_PAREN);
            } 
            // fall through
          case 221: break;
          case 37: 
            { return token(TokenType.ARITH_MINUS);
            } 
            // fall through
          case 222: break;
          case 38: 
            { return token(TokenType.LEFT_SQUARE);
            } 
            // fall through
          case 223: break;
          case 39: 
            { incOpenParenthesisCount(); return token(TokenType.LEFT_PAREN);
            } 
            // fall through
          case 224: break;
          case 40: 
            { return token(TokenType.COMMA);
            } 
            // fall through
          case 225: break;
          case 41: 
            { return token(TokenType.ARITH_BITWISE_NEGATE);
            } 
            // fall through
          case 226: break;
          case 42: 
            { return token(TokenType.ARITH_GT);
            } 
            // fall through
          case 227: break;
          case 43: 
            { return token(TokenType.ARITH_LT);
            } 
            // fall through
          case 228: break;
          case 44: 
            { return token(TokenType.ARITH_DIV);
            } 
            // fall through
          case 229: break;
          case 45: 
            { return token(TokenType.ARITH_MOD);
            } 
            // fall through
          case 230: break;
          case 46: 
            { return token(TokenType.ARITH_QMARK);
            } 
            // fall through
          case 231: break;
          case 47: 
            { return token(TokenType.ARITH_COLON);
            } 
            // fall through
          case 232: break;
          case 48: 
            { backToPreviousState(); return token(TokenType.EXPR_ARITH_SQUARE_END);
            } 
            // fall through
          case 233: break;
          case 49: 
            { return token(TokenType.EXPR_ARITH_SQUARE);
            } 
            // fall through
          case 234: break;
          case 50: 
            { backToPreviousState(); return token(TokenType.RIGHT_SQUARE);
            } 
            // fall through
          case 235: break;
          case 51: 
            { backToPreviousState(); return token(TokenType.RIGHT_PAREN);
            } 
            // fall through
          case 236: break;
          case 52: 
            { backToPreviousState(); if (stringParsingState().isInSubshell()) stringParsingState().leaveSubshell(); return token(TokenType.RIGHT_PAREN);
            } 
            // fall through
          case 237: break;
          case 53: 
            { backToPreviousState(); goToState(S_ARITH_ARRAY_MODE); return token(TokenType.LEFT_SQUARE);
            } 
            // fall through
          case 238: break;
          case 54: 
            { goToState(S_ARITH_ARRAY_MODE); return token(TokenType.LEFT_SQUARE);
            } 
            // fall through
          case 239: break;
          case 55: 
            { return token(TokenType.STRING_DATA);
            } 
            // fall through
          case 240: break;
          case 56: 
            { if (!stringParsingState().isInSubstring() && stringParsingState().isSubstringAllowed()) {
                                    stringParsingState().enterString();
                                    goToState(X_STRINGMODE);
                                    return token(TokenType.STRING_BEGIN);
                                  }

                                  stringParsingState().leaveString();
                                  backToPreviousState();
                                  return token(TokenType.STRING_END);
            } 
            // fall through
          case 241: break;
          case 57: 
            { if (yystate() == S_BACKQUOTE) {
                                    backToPreviousState();
                                }
                                else {
                                    goToState(S_BACKQUOTE);
                                }
                                return token(TokenType.BACKQUOTE);
            } 
            // fall through
          case 242: break;
          case 58: 
            { setParamExpansionHash(isParamExpansionWord()); return token(TokenType.PARAM_EXPANSION_OP_HASH);
            } 
            // fall through
          case 243: break;
          case 59: 
            { return token(TokenType.PARAM_EXPANSION_OP_EXCL);
            } 
            // fall through
          case 244: break;
          case 60: 
            { setParamExpansionOther(true); return token(TokenType.PARAM_EXPANSION_OP_UPPERCASE_FIRST);
            } 
            // fall through
          case 245: break;
          case 61: 
            { setParamExpansionOther(true); return token(TokenType.PARAM_EXPANSION_OP_DOT);
            } 
            // fall through
          case 246: break;
          case 62: 
            { setParamExpansionWord(true); return token(TokenType.WORD);
            } 
            // fall through
          case 247: break;
          case 63: 
            { return token(TokenType.PARAM_EXPANSION_OP_STAR);
            } 
            // fall through
          case 248: break;
          case 64: 
            { return token(TokenType.PARAM_EXPANSION_OP_AT);
            } 
            // fall through
          case 249: break;
          case 65: 
            { return token(TokenType.PARAM_EXPANSION_OP_PLUS);
            } 
            // fall through
          case 250: break;
          case 66: 
            { return token(TokenType.PARAM_EXPANSION_OP_MINUS);
            } 
            // fall through
          case 251: break;
          case 67: 
            { if (!isParamExpansionOther() && (!isParamExpansionWord() || !isParamExpansionHash())) {
                                    // If we expect an array reference scan the next tokens as arithmetic expression
                                    goToState(S_ARITH_ARRAY_MODE);
                                  }

                                  return token(TokenType.LEFT_SQUARE);
            } 
            // fall through
          case 252: break;
          case 68: 
            { return token(TokenType.PARAM_EXPANSION_OP_EQ);
            } 
            // fall through
          case 253: break;
          case 69: 
            { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
                                  return token(TokenType.LEFT_CURLY);
            } 
            // fall through
          case 254: break;
          case 70: 
            { setParamExpansionWord(false); setParamExpansionHash(false); setParamExpansionOther(false);
                                  backToPreviousState();
                                  closeHereStringIfAvailable();
                                  return token(TokenType.RIGHT_CURLY);
            } 
            // fall through
          case 255: break;
          case 71: 
            { setParamExpansionOther(true); return token(TokenType.PARAM_EXPANSION_OP_LOWERCASE_FIRST);
            } 
            // fall through
          case 256: break;
          case 72: 
            { goToState(S_PARAM_EXPANSION_PATTERN); return token(TokenType.PARAM_EXPANSION_OP_SLASH);
            } 
            // fall through
          case 257: break;
          case 73: 
            { setParamExpansionOther(true); return token(TokenType.PARAM_EXPANSION_OP_PERCENT);
            } 
            // fall through
          case 258: break;
          case 74: 
            { setParamExpansionOther(true); return token(TokenType.PARAM_EXPANSION_OP_QMARK);
            } 
            // fall through
          case 259: break;
          case 75: 
            { return token(TokenType.PARAM_EXPANSION_OP_COLON);
            } 
            // fall through
          case 260: break;
          case 76: 
            { backToPreviousState(); return token(TokenType.PARAM_EXPANSION_PATTERN);
            } 
            // fall through
          case 261: break;
          case 77: 
            { yypushback(1); backToPreviousState();
            } 
            // fall through
          case 262: break;
          case 78: 
            { backToPreviousState(); goToState(S_PARAM_EXPANSION_REPLACEMENT); return token(TokenType.PARAM_EXPANSION_OP_SLASH);
            } 
            // fall through
          case 263: break;
          case 79: 
            { backToPreviousState(); return token(TokenType.WORD);
            } 
            // fall through
          case 264: break;
          case 80: 
            { heredocState().pushMarker(yytext(), yystate() == X_HEREDOC_MARKER_IGNORE_TABS);
        backToPreviousState();

        return token(TokenType.HEREDOC_MARKER_START);
            } 
            // fall through
          case 265: break;
          case 81: 
            { return token(TokenType.LINE_FEED);
            } 
            // fall through
          case 266: break;
          case 82: 
            { //support end marker followed by a backtick if nested in a backtick command
            CharSequence markerText = yytext();
            boolean dropLastChar = false;
            if (isInState(S_BACKQUOTE) && yylength() >= 2 && yycharat(yylength()-1) == '`') {
                markerText = markerText.subSequence(0, yylength()-1);
                dropLastChar = true;
            }

            if (heredocState().isNextMarker(markerText)) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(markerText);
                popStates(X_HEREDOC);

                if (dropLastChar) {
                    yypushback(1);
                }

                return token(ignoreTabs ? TokenType.HEREDOC_MARKER_IGNORING_TABS_END : TokenType.HEREDOC_MARKER_END);
            }

            return token(TokenType.HEREDOC_LINE);
            } 
            // fall through
          case 267: break;
          case 83: 
            { if (!heredocState().isEmpty()) {
                                        return token(TokenType.HEREDOC_LINE);
                                  }
                                  return token(TokenType.LINE_FEED);
            } 
            // fall through
          case 268: break;
          case 84: 
            { return token(TokenType.HEREDOC_LINE);
            } 
            // fall through
          case 269: break;
          case 85: 
            { if (heredocState().isNextMarker(yytext())) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(yytext());
                popStates(X_HEREDOC);

                return token(ignoreTabs ? TokenType.HEREDOC_MARKER_IGNORING_TABS_END : TokenType.HEREDOC_MARKER_END);
         }

         return token(TokenType.HEREDOC_LINE);
            } 
            // fall through
          case 270: break;
          case 86: 
            { if (isInHereStringContent()) { leaveHereStringContent(); backToPreviousState(); } return token(TokenType.WHITESPACE);
            } 
            // fall through
          case 271: break;
          case 87: 
            { if (!isInHereStringContent()) enterHereStringContent(); return token(TokenType.WORD);
            } 
            // fall through
          case 272: break;
          case 88: 
            { return token(TokenType.LINE_CONTINUATION);
            } 
            // fall through
          case 273: break;
          case 89: 
            { return token(TokenType.SHEBANG);
            } 
            // fall through
          case 274: break;
          case 90: 
            { return token(TokenType.VARIABLE);
            } 
            // fall through
          case 275: break;
          case 91: 
            { yypushback(1); goToState(S_ARITH_SQUARE_MODE); return token(TokenType.DOLLAR);
            } 
            // fall through
          case 276: break;
          case 92: 
            { if (yystate() == X_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return token(TokenType.HEREDOC_LINE); goToState(S_PARAM_EXPANSION); yypushback(1); return token(TokenType.DOLLAR);
            } 
            // fall through
          case 277: break;
          case 93: 
            { if (yystate() == X_HERE_STRING && !isInHereStringContent()) enterHereStringContent(); return token(TokenType.STRING2);
            } 
            // fall through
          case 278: break;
          case 94: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { return token(TokenType.ASSIGNMENT_WORD);
            } 
            // fall through
          case 279: break;
          case 95: 
            { return token(TokenType.FILEDESCRIPTOR);
            } 
            // fall through
          case 280: break;
          case 96: 
            { closeHereStringIfAvailable(); return token(TokenType.AND_AND);
            } 
            // fall through
          case 281: break;
          case 97: 
            { if (isBash4()) {
                                        return token(TokenType.REDIRECT_AMP_GREATER);
                                    } else {
                                        yypushback(1);
                                        return token(TokenType.AMP);
                                    }
            } 
            // fall through
          case 282: break;
          case 98: 
            { return token(TokenType.ADD_EQ);
            } 
            // fall through
          case 283: break;
          case 99: 
            { if (isBash4()) {
                                        return token(TokenType.PIPE_AMP);
                                     } else {
                                        yypushback(1);
                                        return token(TokenType.PIPE);
                                     }
            } 
            // fall through
          case 284: break;
          case 100: 
            { closeHereStringIfAvailable(); return token(TokenType.OR_OR);
            } 
            // fall through
          case 285: break;
          case 101: 
            { goToState(S_TEST); setEmptyConditionalCommand(false); return token(TokenType.EXPR_CONDITIONAL);
            } 
            // fall through
          case 286: break;
          case 102: 
            { return token(TokenType.IF_KEYWORD);
            } 
            // fall through
          case 287: break;
          case 103: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); goToState(S_ARITH); return token(TokenType.EXPR_ARITH);
            } 
            // fall through
          case 288: break;
          case 104: 
            { return token(TokenType.DO_KEYWORD);
            } 
            // fall through
          case 289: break;
          case 105: 
            { return token(TokenType.FI_KEYWORD);
            } 
            // fall through
          case 290: break;
          case 106: 
            { return token(TokenType.REDIRECT_GREATER_BAR);
            } 
            // fall through
          case 291: break;
          case 107: 
            { return token(TokenType.SHIFT_RIGHT);
            } 
            // fall through
          case 292: break;
          case 108: 
            { return token(TokenType.REDIRECT_LESS_GREATER);
            } 
            // fall through
          case 293: break;
          case 109: 
            { goToState(X_HEREDOC_MARKER);
        return token(TokenType.HEREDOC_MARKER_TAG);
            } 
            // fall through
          case 294: break;
          case 110: 
            { backToPreviousState(); setEmptyConditionalCommand(false); return token(TokenType.EXPR_CONDITIONAL_END);
            } 
            // fall through
          case 295: break;
          case 111: 
            { return token(TokenType.COND_OP_EQ_EQ);
            } 
            // fall through
          case 296: break;
          case 112: 
            { return token(TokenType.COND_OP_REGEX);
            } 
            // fall through
          case 297: break;
          case 113: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { goToState(S_DOLLAR_PREFIXED); return token(TokenType.DOLLAR);
            } 
            // fall through
          case 298: break;
          case 114: 
            { return token(TokenType.AND_AND);
            } 
            // fall through
          case 299: break;
          case 115: 
            { return token(TokenType.OR_OR);
            } 
            // fall through
          case 300: break;
          case 116: 
            { return token(TokenType.ARITH_NE);
            } 
            // fall through
          case 301: break;
          case 117: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { if (yystate() == X_HEREDOC && !heredocState().isExpectingEvaluatingHeredoc()) return token(TokenType.HEREDOC_LINE); goToState(S_DOLLAR_PREFIXED); return token(TokenType.DOLLAR);
            } 
            // fall through
          case 302: break;
          case 118: 
            { return token(TokenType.ARITH_ASS_BIT_XOR);
            } 
            // fall through
          case 303: break;
          case 119: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { goToState(S_ARRAY); return token(TokenType.ASSIGNMENT_WORD);
            } 
            // fall through
          case 304: break;
          case 120: 
            { return token(TokenType.ARITH_ASS_BIT_AND);
            } 
            // fall through
          case 305: break;
          case 121: 
            { return token(TokenType.ARITH_EXPONENT);
            } 
            // fall through
          case 306: break;
          case 122: 
            { return token(TokenType.ARITH_ASS_MUL);
            } 
            // fall through
          case 307: break;
          case 123: 
            { return token(TokenType.ARITH_PLUS_PLUS);
            } 
            // fall through
          case 308: break;
          case 124: 
            { return token(TokenType.ARITH_ASS_PLUS);
            } 
            // fall through
          case 309: break;
          case 125: 
            { return token(TokenType.ARITH_OCTAL_NUMBER);
            } 
            // fall through
          case 310: break;
          case 126: 
            { if (openParenthesisCount() > 0) {
                                    decOpenParenthesisCount();
                                    yypushback(1);

                                    return token(TokenType.RIGHT_PAREN);
                                  } else {
                                    backToPreviousState();

                                    return token(TokenType.EXPR_ARITH_END);
                                  }
            } 
            // fall through
          case 311: break;
          case 127: 
            { return token(TokenType.ARITH_MINUS_MINUS);
            } 
            // fall through
          case 312: break;
          case 128: 
            { return token(TokenType.ARITH_ASS_MINUS);
            } 
            // fall through
          case 313: break;
          case 129: 
            { return token(TokenType.ARITH_ASS_BIT_OR);
            } 
            // fall through
          case 314: break;
          case 130: 
            { return token(TokenType.ARITH_EQ);
            } 
            // fall through
          case 315: break;
          case 131: 
            { return token(TokenType.ARITH_GE);
            } 
            // fall through
          case 316: break;
          case 132: 
            { return token(TokenType.ARITH_SHIFT_RIGHT);
            } 
            // fall through
          case 317: break;
          case 133: 
            { return token(TokenType.ARITH_LE);
            } 
            // fall through
          case 318: break;
          case 134: 
            { return token(TokenType.ARITH_SHIFT_LEFT);
            } 
            // fall through
          case 319: break;
          case 135: 
            { return token(TokenType.ARITH_ASS_DIV);
            } 
            // fall through
          case 320: break;
          case 136: 
            { return token(TokenType.ARITH_ASS_MOD);
            } 
            // fall through
          case 321: break;
          case 137: 
            { goToState(S_CASE_PATTERN);
                                 if (isBash4()) {
                                    return token(TokenType.CASE_END);
                                 }
                                 else {
                                    yypushback(1);
                                    return token(TokenType.SEMI);
                                 }
            } 
            // fall through
          case 322: break;
          case 138: 
            { goToState(S_CASE_PATTERN); return token(TokenType.CASE_END);
            } 
            // fall through
          case 323: break;
          case 139: 
            { if (!isInCaseBody()) { setInCaseBody(true); goToState(S_CASE_PATTERN); }; return token(TokenType.WORD);
            } 
            // fall through
          case 324: break;
          case 140: 
            { setParamExpansionHash(isParamExpansionWord()); return token(TokenType.PARAM_EXPANSION_OP_HASH_HASH);
            } 
            // fall through
          case 325: break;
          case 141: 
            { setParamExpansionOther(true); return token(TokenType.PARAM_EXPANSION_OP_UPPERCASE_ALL);
            } 
            // fall through
          case 326: break;
          case 142: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { return token(TokenType.LEFT_SQUARE);
            } 
            // fall through
          case 327: break;
          case 143: 
            { setParamExpansionOther(true); return token(TokenType.PARAM_EXPANSION_OP_LOWERCASE_ALL);
            } 
            // fall through
          case 328: break;
          case 144: 
            { goToState(S_PARAM_EXPANSION_PATTERN); return token(TokenType.PARAM_EXPANSION_OP_SLASH_SLASH);
            } 
            // fall through
          case 329: break;
          case 145: 
            { return token(TokenType.PARAM_EXPANSION_OP_COLON_PLUS);
            } 
            // fall through
          case 330: break;
          case 146: 
            { return token(TokenType.PARAM_EXPANSION_OP_COLON_MINUS);
            } 
            // fall through
          case 331: break;
          case 147: 
            { return token(TokenType.PARAM_EXPANSION_OP_COLON_EQ);
            } 
            // fall through
          case 332: break;
          case 148: 
            { return token(TokenType.PARAM_EXPANSION_OP_COLON_QMARK);
            } 
            // fall through
          case 333: break;
          case 149: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { backToPreviousState(); goToState(S_PARAM_EXPANSION_DELIMITER); return token(TokenType.PARAM_EXPANSION_PATTERN);
            } 
            // fall through
          case 334: break;
          case 150: 
            { if (heredocState().isNextMarker(yytext())) {
                boolean ignoreTabs = heredocState().isIgnoringTabs();

                heredocState().popMarker(yytext());
                popStates(X_HEREDOC);

                return token(ignoreTabs ? TokenType.HEREDOC_MARKER_IGNORING_TABS_END : TokenType.HEREDOC_MARKER_END);
            }

            return token(yystate() == X_HEREDOC && heredocState().isExpectingEvaluatingHeredoc() && !"$".equals(yytext().toString())
                ? TokenType.VARIABLE
                : TokenType.HEREDOC_LINE);
            } 
            // fall through
          case 335: break;
          case 151: 
            { if (!isInHereStringContent()) enterHereStringContent(); return token(TokenType.VARIABLE);
            } 
            // fall through
          case 336: break;
          case 152: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { return token(TokenType.ASSIGNMENT_WORD);
            } 
            // fall through
          case 337: break;
          case 153: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -2);
            { goToState(S_ASSIGNMENT_LIST); return token(TokenType.ASSIGNMENT_WORD);
            } 
            // fall through
          case 338: break;
          case 154: 
            { if (isBash4()) {
                                        return token(TokenType.REDIRECT_AMP_GREATER_GREATER);
                                    } else {
                                        yypushback(2);
                                        return token(TokenType.AMP);
                                    }
            } 
            // fall through
          case 339: break;
          case 155: 
            { goToState(S_TEST_COMMAND); return token(TokenType.BRACKET_KEYWORD);
            } 
            // fall through
          case 340: break;
          case 156: 
            { yypushback(1); goToState(S_TEST); setEmptyConditionalCommand(true); return token(TokenType.EXPR_CONDITIONAL);
            } 
            // fall through
          case 341: break;
          case 157: 
            { if (yystate() == S_DOLLAR_PREFIXED) backToPreviousState(); yypushback(2); goToState(S_SUBSHELL); return token(TokenType.LEFT_PAREN);
            } 
            // fall through
          case 342: break;
          case 158: 
            { return token(TokenType.LET_KEYWORD);
            } 
            // fall through
          case 343: break;
          case 159: 
            { return token(TokenType.FOR_KEYWORD);
            } 
            // fall through
          case 344: break;
          case 160: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return token(TokenType.REDIRECT_GREATER_AMP);
            } 
            // fall through
          case 345: break;
          case 161: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { return token(TokenType.REDIRECT_LESS_AMP);
            } 
            // fall through
          case 346: break;
          case 162: 
            { goToState(X_HEREDOC_MARKER_IGNORE_TABS);
        return token(TokenType.HEREDOC_MARKER_TAG);
            } 
            // fall through
          case 347: break;
          case 163: 
            { goToState(X_HERE_STRING); return token(TokenType.REDIRECT_HERE_STRING);
            } 
            // fall through
          case 348: break;
          case 164: 
            { backToPreviousState(); return token(TokenType.BRACKET_KEYWORD_END);
            } 
            // fall through
          case 349: break;
          case 165: 
            { return token(TokenType.ARITH_HEX_NUMBER);
            } 
            // fall through
          case 350: break;
          case 166: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 2);
            { yypushback(1); return token(TokenType.ARITH_MINUS);
            } 
            // fall through
          case 351: break;
          case 167: 
            { return token(TokenType.ARITH_ASS_SHIFT_RIGHT);
            } 
            // fall through
          case 352: break;
          case 168: 
            { return token(TokenType.ARITH_ASS_SHIFT_LEFT);
            } 
            // fall through
          case 353: break;
          case 169: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
            { backToPreviousState(); goToState(S_ASSIGNMENT_LIST); return token(TokenType.RIGHT_SQUARE);
            } 
            // fall through
          case 354: break;
          case 170: 
            { goToState(S_CASE_PATTERN);
                                 if (!isBash4()) {
                                    yypushback(1);
                                 }
                                 return token(TokenType.CASE_END);
            } 
            // fall through
          case 355: break;
          case 171: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -3);
            { goToState(S_ASSIGNMENT_LIST); return token(TokenType.ASSIGNMENT_WORD);
            } 
            // fall through
          case 356: break;
          case 172: 
            // general lookahead, find correct zzMarkedPos
            { int zzFState = 21;
              int zzFPos = zzStartRead;
              if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
              boolean zzFinL[] = zzFin;
              while (zzFState != -1 && zzFPos < zzMarkedPos) {
                zzFinL[zzFPos] = ((zzAttrL[zzFState] & 1) == 1);
                zzInput = Character.codePointAt(zzBufferL, zzFPos, zzMarkedPos);
                zzFPos += Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              }
              if (zzFState != -1) { zzFinL[zzFPos++] = ((zzAttrL[zzFState] & 1) == 1); } 
              while (zzFPos <= zzMarkedPos) {
                zzFinL[zzFPos++] = false;
              }

              zzFState = 22;
              zzFPos = zzMarkedPos;
              while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
                zzInput = Character.codePointBefore(zzBufferL, zzFPos, zzStartRead);
                zzFPos -= Character.charCount(zzInput);
                zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
              };
              zzMarkedPos = zzFPos;
            }
            { goToState(S_ARRAY); return token(TokenType.ASSIGNMENT_WORD);
            } 
            // fall through
          case 357: break;
          case 173: 
            { return token(TokenType.TIME_KEYWORD);
            } 
            // fall through
          case 358: break;
          case 174: 
            { return token(TokenType.TRAP_KEYWORD);
            } 
            // fall through
          case 359: break;
          case 175: 
            { return token(TokenType.THEN_KEYWORD);
            } 
            // fall through
          case 360: break;
          case 176: 
            { return token(TokenType.ELIF_KEYWORD);
            } 
            // fall through
          case 361: break;
          case 177: 
            { return token(TokenType.ELSE_KEYWORD);
            } 
            // fall through
          case 362: break;
          case 178: 
            { setInCaseBody(false); goToState(S_CASE); return token(TokenType.CASE_KEYWORD);
            } 
            // fall through
          case 363: break;
          case 179: 
            { return token(TokenType.DONE_KEYWORD);
            } 
            // fall through
          case 364: break;
          case 180: 
            { backToPreviousState(); return token(TokenType.ESAC_KEYWORD);
            } 
            // fall through
          case 365: break;
          case 181: 
            { backToPreviousState(); yypushback(yylength());
            } 
            // fall through
          case 366: break;
          case 182: 
            { return token(TokenType.UNTIL_KEYWORD);
            } 
            // fall through
          case 367: break;
          case 183: 
            { return token(TokenType.WHILE_KEYWORD);
            } 
            // fall through
          case 368: break;
          case 184: 
            { return token(TokenType.SELECT_KEYWORD);
            } 
            // fall through
          case 369: break;
          case 185: 
            { return token(TokenType.FUNCTION_KEYWORD);
            } 
            // fall through
          case 370: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
